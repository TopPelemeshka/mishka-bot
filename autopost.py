# autopost.py
import datetime
import random
import logging

from telegram import InputMediaPhoto, InputMediaVideo
from telegram.ext import ContextTypes

from config import POST_CHAT_ID
from utils_autopost import (
    get_top_anecdote_and_remove,
    get_random_file_from_folder,
    move_file_to_archive,
    get_available_stats,
    predict_10pics_posts,
    predict_3videos_posts,
    predict_full_days,
    is_valid_file,
)

from quiz import count_quiz_questions

from wisdom import load_wisdoms

import state

logger = logging.getLogger(__name__)

def random_time_in_range(start: datetime.time, end: datetime.time) -> datetime.time:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è (datetime.time) –º–µ–∂–¥—É start –∏ end.
    –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ start = datetime.time(18, 15) –∏ end = datetime.time(18, 45),
    —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—ë—Ç –≤—Ä–µ–º—è –º–µ–∂–¥—É 18:15:00 –∏ 18:45:00.
    """
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è
    start_seconds = start.hour * 3600 + start.minute * 60 + start.second
    end_seconds = end.hour * 3600 + end.minute * 60 + end.second
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É start_seconds –∏ end_seconds
    random_seconds = random.randint(start_seconds, end_seconds)
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã
    hour = random_seconds // 3600
    minute = (random_seconds % 3600) // 60
    second = random_seconds % 60
    return datetime.time(hour, minute, second)


def _get_folder_by_category(category: str):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    from config import (
        ERO_ANIME_DIR,
        ERO_REAL_DIR,
        SINGLE_MEME_DIR,
        STANDART_ART_DIR,
        STANDART_MEME_DIR,
        VIDEO_MEME_DIR
    )
    if category == "ero-anime":
        return ERO_ANIME_DIR
    elif category == "ero-real":
        return ERO_REAL_DIR
    elif category == "single-meme":
        return SINGLE_MEME_DIR
    elif category == "standart-art":
        return STANDART_ART_DIR
    elif category == "standart-meme":
        return STANDART_MEME_DIR
    elif category == "video-meme":
        return VIDEO_MEME_DIR
    return None


async def autopost_10_pics_callback(context: ContextTypes.DEFAULT_TYPE):
    if not state.autopost_enabled:
        return
    categories = [
        "ero-real",
        "standart-art/standart-meme",
        "ero-anime",
        "single-meme/standart-meme",
        "ero-real",
        "standart-meme",
        "ero-anime",
        "standart-meme",
        "ero-real",
        "standart-meme"
    ]

    anecdote = get_top_anecdote_and_remove()
    if not anecdote:
        await context.bot.send_message(chat_id=POST_CHAT_ID, text="–ê–Ω–µ–∫–¥–æ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò≠")
        return

    media = []
    used_files = []  # –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (file_path, real_cat)

    for cat in categories:
        if "/" in cat:
            cat1, cat2 = cat.split("/")
            file_path = get_random_file_from_folder(_get_folder_by_category(cat1))
            if file_path is None:
                file_path = get_random_file_from_folder(_get_folder_by_category(cat2))
                real_cat = cat2
            else:
                real_cat = cat1
        else:
            file_path = get_random_file_from_folder(_get_folder_by_category(cat))
            real_cat = cat

        if file_path is None:
            await context.bot.send_message(
                chat_id=POST_CHAT_ID,
                text=f"–£ –Ω–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å {cat} üò≠"
            )
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {real_cat}: {file_path}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if not is_valid_file(file_path):
            logger.error(f"–§–∞–π–ª –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É: {file_path}")
            await context.bot.send_message(
                chat_id=POST_CHAT_ID,
                text=f"–§–∞–π–ª –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {real_cat} –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É: {file_path}"
            )
            return
            
        media.append(InputMediaPhoto(open(file_path, "rb")))
        used_files.append((file_path, real_cat))

    try:
        await context.bot.send_media_group(
            chat_id=POST_CHAT_ID,
            media=media,
            read_timeout=180
        )
        await context.bot.send_message(
            chat_id=POST_CHAT_ID,
            text=anecdote,
            read_timeout=180
        )
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞. –§–∞–π–ª—ã: {used_files}. –û—à–∏–±–∫–∞: {e}")
        await context.bot.send_message(
            chat_id=POST_CHAT_ID,
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}"
        )
        return

    for path, cat in used_files:
        move_file_to_archive(path, cat)


async def autopost_3_videos_callback(context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—Å—Ç —Å 3 –≤–∏–¥–µ–æ –∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–º."""
    if not state.autopost_enabled:
        return

    anecdote = get_top_anecdote_and_remove()
    if not anecdote:
        await context.bot.send_message(chat_id=POST_CHAT_ID, text="–ê–Ω–µ–∫–¥–æ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò≠")
        return

    media = []
    used_files = []
    for _ in range(3):
        file_path = get_random_file_from_folder(_get_folder_by_category("video-meme"))
        if file_path is None:
            await context.bot.send_message(
                chat_id=POST_CHAT_ID,
                text="–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤–∏–¥–æ—Å–∏–∫–æ–≤ video-meme üò≠"
            )
            return
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if not is_valid_file(file_path):
            logger.error(f"–í–∏–¥–µ–æ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É: {file_path}")
            await context.bot.send_message(
                chat_id=POST_CHAT_ID,
                text=f"–í–∏–¥–µ–æ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É: {file_path}"
            )
            return
            
        media.append(InputMediaVideo(open(file_path, "rb")))
        used_files.append((file_path, "video-meme"))

    # –ü—É–±–ª–∏–∫—É–µ–º
    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 180 —Å–µ–∫—É–Ω–¥
        await context.bot.send_media_group(
            chat_id=POST_CHAT_ID,
            media=media,
            read_timeout=180
        )
        await context.bot.send_message(
            chat_id=POST_CHAT_ID,
            text=anecdote,
            read_timeout=180
        )
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ–± –æ—à–∏–±–∫–µ –≤–º–µ—Å—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–∞—Ö
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–æ—Å–∏–∫–æ–≤. –§–∞–π–ª—ã: {used_files}. –û—à–∏–±–∫–∞: {e}")
        await context.bot.send_message(
            chat_id=POST_CHAT_ID,
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–æ—Å–∏–∫–æ–≤: {e}\n–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã: {used_files}"
        )
        return

    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –∞—Ä—Ö–∏–≤
    for path, cat in used_files:
        move_file_to_archive(path, cat)


async def stop_autopost_command(update, context):
    """–í—ã–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ (—Ñ–ª–∞–≥ autopost_enabled)."""
    state.autopost_enabled = False
    state.save_state(state.autopost_enabled, state.quiz_enabled)  # <--- —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ —Ñ–∞–π–ª
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

async def start_autopost_command(update, context):
    """–í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥."""
    state.autopost_enabled = True
    state.save_state(state.autopost_enabled, state.quiz_enabled)  # <--- —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ —Ñ–∞–π–ª
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

async def stats_command(update, context):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Å—Ç–∞—Ç–∫–æ–≤, –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —É–∑–∫–æ–µ –º–µ—Å—Ç–æ (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Å —É—á—ë—Ç–æ–º –≤–∏–¥–µ–æ)."""
    stats = get_available_stats()
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–æ–≤
    max_10pics = predict_10pics_posts(stats)
    max_3videos = predict_3videos_posts(stats)
    full_days = predict_full_days(stats)
    
    wisdoms = load_wisdoms()
    wisdom_count = len(wisdoms)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å ¬´–æ—Ç–Ω–æ—à–µ–Ω–∏–π¬ª –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
    #   ero-real: —Ç—Ä–µ–±—É–µ—Ç—Å—è 3 —à—Ç—É–∫–∏ –Ω–∞ –ø–æ—Å—Ç ‚Üí –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ = count / 3
    #   ero-anime: —Ç—Ä–µ–±—É–µ—Ç—Å—è 2 —à—Ç—É–∫–∏ –Ω–∞ –ø–æ—Å—Ç ‚Üí –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ = count / 2
    #   standart-meme: —Ç—Ä–µ–±—É–µ—Ç—Å—è 3 —à—Ç—É–∫–∏ –Ω–∞ –ø–æ—Å—Ç (–±–µ–∑ —É—á—ë—Ç–∞ fallback) ‚Üí count / 3
    #   anecdotes: 1 –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞ –ø–æ—Å—Ç ‚Üí count –ø–æ—Å—Ç–æ–≤
    # –î–ª—è –≤–∏–¥–µ–æ:
    #   video-meme: —Ç—Ä–µ–±—É–µ—Ç—Å—è 3 –≤–∏–¥–µ–æ –Ω–∞ –ø–æ—Å—Ç ‚Üí count / 3
    ratios = {}
    if stats.get("ero-real", 0):
        ratios["ero-real"] = stats["ero-real"] / 9
    if stats.get("ero-anime", 0):
        ratios["ero-anime"] = stats["ero-anime"] / 6
    if stats.get("standart-meme", 0):
        ratios["standart-meme"] = stats["standart-meme"] / 12
    if stats.get("anecdotes", 0):
        ratios["anecdotes"] = stats["anecdotes"] / 4
    if stats.get("video-meme", 0):
        ratios["video-meme"] = stats["video-meme"] / 3

    if ratios:
        bottleneck_category = min(ratios, key=ratios.get)
        bottleneck_posts = int(ratios[bottleneck_category])
    else:
        bottleneck_category = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        bottleneck_posts = 0

    quiz_count = count_quiz_questions()
    text_lines = []
    text_lines.append(f"–£ –ù–ê–° –ù–ï–•–í–ê–¢–ö–ê –ö–ê–†–¢–ò–ù–û–ö 70 –ü–†–û–¶–ï–ù–¢–û–í. \nTOPPELEMESHKA, –ì–î–ï, –°–£–ö–ê, –ú–ï–ú–´?")
    text_lines.append("")
    text_lines.append("–¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
    for k, v in stats.items():
        text_lines.append(f"  {k}: {v}")
    text_lines.append("")
    text_lines.append(
        f"–î–µ—Ñ–∏—Ü–∏—Ç: '{bottleneck_category}'"
    )
    text_lines.append("")
    text_lines.append(f"–í–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ—Å—Ç–∞–ª–æ—Å—å: {quiz_count}")
    text_lines.append(f"–¶–∏—Ç–∞—Ç –¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: {wisdom_count}")
    text_lines.append("")
    text_lines.append("")
    text_lines.append(f"<b>–ü–û–°–¢–û–í –û–°–¢–ê–õ–û–°–¨ –ù–ê {full_days} –î–ù–ï–ô.</b>")
    text_lines.append(f"<b>–í–ò–ö–¢–û–†–ò–ù –û–°–¢–ê–õ–û–°–¨ –ù–ê {round(quiz_count/8)} –î–ù–ï–ô.</b>")
    text_lines.append(f"<b>–¶–ò–¢–ê–¢ –î–ù–Ø –û–°–¢–ê–õ–û–°–¨ –ù–ê {wisdom_count} –î–ù–ï–ô.</b>")

    await context.bot.send_message(
    chat_id=update.effective_chat.id,
    text="\n".join(text_lines),
    parse_mode="HTML"
)

async def next_posts_command(update, context):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å—Ç–æ–≤
    –∏ —Å–∫–æ–ª—å–∫–æ –¥–æ –Ω–∏—Ö –æ—Å—Ç–∞–ª–æ—Å—å (–≤ —á–∞—Å–∞—Ö –∏ –º–∏–Ω—É—Ç–∞—Ö).
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
    now_utc = datetime.datetime.utcnow().replace(tzinfo=datetime.timezone.utc)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
    all_jobs = context.job_queue.jobs()

    if not all_jobs:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    lines = []
    for job in all_jobs:
        if job.next_run_time is None:
            continue
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫ UTC
        job_next_utc = job.next_run_time.astimezone(datetime.timezone.utc)
        delta = job_next_utc - now_utc
        total_seconds = delta.total_seconds()
        if total_seconds < 0:
            continue

        hours = int(total_seconds // 3600)
        minutes = int((total_seconds % 3600) // 60)
        lines.append(f"–ó–∞–¥–∞—á–∞: {job.name}")
        lines.append(f"  –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {job.next_run_time.strftime('%Y-%m-%d %H:%M:%S %Z')}")
        lines.append(f"  –î–æ –∑–∞–ø—É—Å–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {hours} —á {minutes} –º–∏–Ω\n")

    if not lines:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å –±—É–¥—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–ø—É—Å–∫–∞.")
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="\n".join(lines))
