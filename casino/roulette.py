from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import asyncio
import random
from balance import get_balance, update_balance
from casino.roulette_utils import get_roulette_result
from telegram.error import TimedOut
import time
import json
import os

def load_file_ids():
    """–ó–∞–≥—Ä—É–∑–∫–∞ ID —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    config_path = os.path.join('config', 'file_ids.json')
    with open(config_path, 'r', encoding='utf-8') as f:
        return json.load(f)

async def safe_delete_message(gif_message, retries=3, delay=1):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º-–∞—É—Ç–∞."""
    for _ in range(retries):
        try:
            await gif_message.delete()
            return  # –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
        except TimedOut:
            print("–û—à–∏–±–∫–∞ —Ç–∞–π–º-–∞—É—Ç–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...")
            await asyncio.sleep(delay)
    print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")

async def handle_roulette_bet_callback(query, context: ContextTypes.DEFAULT_TYPE, bet_type: str):
    bet_amount = int(query.data.split(":")[-1])  
    user_id = query.from_user.id
    bal = get_balance(user_id)

    if bal < bet_amount:
        await query.answer("üí∏ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.", show_alert=True)
        return

    update_balance(user_id, -bet_amount)
    result = get_roulette_result()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º ID –≥–∏—Ñ–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    file_ids = load_file_ids()
    gif_ids = file_ids['animations']['roulette']

    if result == 'black':
        gif_id = random.choice(gif_ids['black'])
    elif result == 'red':
        gif_id = random.choice(gif_ids['red'])
    else:
        gif_id = random.choice(gif_ids['zero'])

    try:
        gif_message = await query.message.chat.send_animation(gif_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∏—Ñ–∫–∏: {e}")
        return

    await asyncio.sleep(5.5)
    await safe_delete_message(gif_message)

    win = result == bet_type

    if win:
        base_winnings = 100 if bet_type != 'zero' else 1800
        winnings = int(base_winnings * (bet_amount / 50))
        if bet_type == 'zero':
            winnings = int(winnings)
        update_balance(user_id, winnings)
        message = f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –º–æ–Ω–µ—Ç! üéâ"
    else:
        result_emoji = "‚ö´" if result == "black" else "üî¥" if result == "red" else "üü¢"
        message = f"üòî *–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.* –í—ã–ø–∞–ª–æ: {result_emoji}"

    new_balance = get_balance(user_id)
    message += f"\n\nüí∞ *–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å*: {new_balance} –º–æ–Ω–µ—Ç."

    keyboard = [
        [InlineKeyboardButton("üé∞ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë", callback_data=f"casino:roulette")],
        [InlineKeyboardButton("üè† –í –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ", callback_data="casino:menu")]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    try:
        await query.message.edit_text(message, reply_markup=markup, parse_mode='Markdown')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await query.answer()




async def handle_roulette_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    bal = get_balance(user_id)
    min_bet = 5
    max_bet = bal

    bet_amount = context.user_data.get('bet_amount', min_bet)
    bet_amount = max(min_bet, min(bet_amount, max_bet))

    keyboard = [
        [
            InlineKeyboardButton(f"‚ö´ –ß—ë—Ä–Ω–æ–µ", callback_data=f"roulette_bet:black:{bet_amount}"),
            InlineKeyboardButton(f"üî¥ –ö—Ä–∞—Å–Ω–æ–µ", callback_data=f"roulette_bet:red:{bet_amount}"),
            InlineKeyboardButton(f"üü¢ –ó–µ—Ä–æ", callback_data=f"roulette_bet:zero:{bet_amount}"),
        ],
        [
            InlineKeyboardButton(f"üí∞ –°—Ç–∞–≤–∫–∞ +5", callback_data=f"change_bet:+5"),
            InlineKeyboardButton(f"üí∞ –°—Ç–∞–≤–∫–∞ -5", callback_data=f"change_bet:-5")
        ],
        [
            InlineKeyboardButton("üè† –í –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ", callback_data="casino:menu")  # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    text = (
        "üé∞ **–†—É–ª–µ—Ç–∫–∞**\n\n"
        f"üí∞ **–°—Ç–∞–≤–∫–∞**: {bet_amount} –º–æ–Ω–µ—Ç\n"
        "üéÅ **–í—ã–∏–≥—Ä—ã—à**:\n"
        f"- **–ß—ë—Ä–Ω–æ–µ / –ö—Ä–∞—Å–Ω–æ–µ**: {int(100 * (bet_amount / 50))} –º–æ–Ω–µ—Ç\n"
        f"- **–ó–µ—Ä–æ**: {int(3600 * (bet_amount / 50))} –º–æ–Ω–µ—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:"
    )

    if update.callback_query:
        message = update.callback_query.message
    else:
        return

    try:
        await message.edit_text(text, reply_markup=markup, parse_mode='Markdown')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é —Å—Ç–∞–≤–æ–∫: {e}")

    context.user_data['bet_amount'] = bet_amount
    await update.callback_query.answer()


async def handle_change_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    bal = get_balance(user_id)
    min_bet = 5
    max_bet = bal

    bet_amount = context.user_data.get('bet_amount', min_bet)

    if update.callback_query.data == "change_bet:+5":
        bet_amount += 5
    elif update.callback_query.data == "change_bet:-5":
        bet_amount -= 5

    bet_amount = max(min_bet, min(bet_amount, max_bet))

    context.user_data['bet_amount'] = bet_amount

    await handle_roulette_bet(update, context)
