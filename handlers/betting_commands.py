# handlers/betting_commands.py
"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞–≤–æ–∫.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CallbackContext
import logging
import json
import datetime
import time

from betting import (
    load_betting_events, 
    load_betting_data, 
    place_bet, 
    get_betting_history,
    get_user_streak,
    save_betting_events,
    get_next_active_event,
    publish_event,
    process_event_results
)
from balance import get_balance
from config import schedule_config, TIMEZONE_OFFSET

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è conversation handler
BET_AMOUNT = 0
BET_OPTION = 1

# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
BET_CALLBACK_PREFIX = "bet_"
BET_OPTION_PREFIX = "bet_option_"
BET_AMOUNT_PREFIX = "bet_amount_"

async def bet_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bet.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    logging.info("bet_command –≤—ã–∑–≤–∞–Ω")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ callback –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
    query = update.callback_query
    event_id_from_callback = None
    
    if query:
        # –≠—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏
        await query.answer()
        chat_id = update.effective_chat.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è –∏–∑ callback data
        callback_data = query.data
        logging.info(f"bet_command –≤—ã–∑–≤–∞–Ω —á–µ—Ä–µ–∑ callback —Å –¥–∞–Ω–Ω—ã–º–∏: {callback_data}")
        
        if callback_data.startswith("bet_event_"):
            event_id_str = callback_data.replace("bet_event_", "")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è "next"
            if event_id_str != "next":
                event_id_from_callback = event_id_str
                logging.info(f"ID —Å–æ–±—ã—Ç–∏—è –∏–∑ callback: {event_id_from_callback}")
    else:
        # –≠—Ç–æ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        chat_id = update.effective_chat.id
        logging.info("bet_command –≤—ã–∑–≤–∞–Ω —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
        
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    betting_events = load_betting_events()
    active_event = None
    
    # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å ID –∏–∑ callback, –∏—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    if event_id_from_callback:
        for event in betting_events.get("events", []):
            if str(event.get("id")) == event_id_from_callback:
                active_event = event
                logging.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ ID –∏–∑ callback: {event}")
                break
    
    # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ID –∏–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç ID (–∫–æ–º–∞–Ω–¥–∞ /bet),
    # –∏—â–µ–º –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    if not active_event:
        logging.info("–ò—â–µ–º –ø–µ—Ä–≤–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ")
        for event in betting_events.get("events", []):
            if event.get("is_active", True):
                active_event = event
                logging.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event}")
                break
    
    if not active_event:
        message = "üé≤ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—Ç–∞–≤–æ–∫."
        logging.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—Ç–∞–≤–æ–∫")
        if query:
            # –ü—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback
            await query.answer(text=message, show_alert=True)
        else:
            await context.bot.send_message(chat_id=chat_id, text=message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ —Å–æ–±—ã—Ç–∏–µ
    if not active_event.get("is_active", True) and not event_id_from_callback:
        message = "üé≤ –í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ –¥–ª—è —Å—Ç–∞–≤–æ–∫."
        logging.warning(f"–°–æ–±—ã—Ç–∏–µ —Å ID {active_event.get('id')} –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")
        if query:
            await query.answer(text=message, show_alert=True)
        else:
            await context.bot.send_message(chat_id=chat_id, text=message)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    betting_config = schedule_config.get("betting", {})
    results_time = betting_config.get("results_time", "21:00")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è
    description = active_event.get("description", "")
    question = active_event.get("question", "")
    options = active_event.get("options", [])
    
    text = f"üéÆ *–°–¢–ê–í–ö–ò, –ì–û–°–ü–û–î–ê!* üé≤\n\n"
    text += f"üìå *{description}*\n\n"
    text += f"‚ùì *{question}*\n\n"
    text += "üéØ *–í–∞—Ä–∏–∞–Ω—Ç—ã:*\n"
    
    for option in options:
        option_text = option.get("text", "")
        text += f"‚Ä¢ {option_text}\n"
    
    text += f"\nüí∞ –í—ã–∏–≥—Ä—ã—à –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—â–µ–π —Å—É–º–º—ã —Å—Ç–∞–≤–æ–∫ –≤ —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–µ!\n"
    text += f"‚è∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ {results_time} (UTC+{TIMEZONE_OFFSET}). –£–¥–∞—á–∏! üçÄ\n\n"
    text += "üëá –°–¥–µ–ª–∞–π—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    keyboard = []
    for option in options:
        option_id = option.get("id")
        option_text = option.get("text")
        
        callback_data = f"{BET_OPTION_PREFIX}{active_event.get('id')}_{option_id}"
        logging.info(f"–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å callback_data: {callback_data}")
        
        button = InlineKeyboardButton(
            f"{option_text}", 
            callback_data=callback_data
        )
        keyboard.append([button])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å—Ç–∞–≤–æ–∫: message_id={message.message_id}")

async def bet_option_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å—Ç–∞–≤–∫–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"bet_option_callback –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {query.data}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    callback_data = query.data
    if not callback_data.startswith(BET_OPTION_PREFIX):
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å callback_data: {callback_data}")
        return
    
    data_parts = callback_data[len(BET_OPTION_PREFIX):].split('_')
    if len(data_parts) != 2:
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç data_parts: {data_parts}")
        return
    
    event_id = data_parts[0]  # –ù–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    option_id = data_parts[1]  # –ù–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏: event_id={event_id}, option_id={option_id}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ
    betting_events = load_betting_events()
    event = None
    option_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
    
    for e in betting_events.get("events", []):
        if str(e.get("id")) == str(event_id):
            event = e
            for opt in e.get("options", []):
                if str(opt.get("id")) == str(option_id):
                    option_text = opt.get("text")
                    break
            break
    
    if not event:
        logging.error(f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await query.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ —Å–æ–±—ã—Ç–∏–µ
    if not event.get("is_active", True):
        logging.warning(f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")
        await query.answer(text="–≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ –¥–ª—è —Å—Ç–∞–≤–æ–∫.", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ ID —Å–æ–±—ã—Ç–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["bet_event_id"] = event_id
    context.user_data["bet_option_id"] = option_id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–±—ã—Ç–∏–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    context.user_data["event_message_id"] = query.message.message_id
    
    logging.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω: event_id={event_id}, option_id={option_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    user_balance = get_balance(user_id)
    
    text = f"üéØ –í—ã–±—Ä–∞–Ω–æ: *{option_text}*\n\n"
    text += f"üí∞ –ë–∞–ª–∞–Ω—Å: *{user_balance}* üíµ\n\n"
    text += "üí∏ –°–∫–æ–ª—å–∫–æ —Å—Ç–∞–≤–∏–º?"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å—É–º–º —Å—Ç–∞–≤–æ–∫
    keyboard = []
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—É–º–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–ª–∞–Ω—Å–∞
    bet_amounts = [10, 25, 50, 100, 200, 500]
    row = []
    
    for i, amount in enumerate(bet_amounts):
        if amount <= user_balance:
            button = InlineKeyboardButton(
                f"{amount} üíµ", 
                callback_data=f"{BET_AMOUNT_PREFIX}{amount}"
            )
            row.append(button)
            
            if len(row) == 3:
                keyboard.append(row)
                row = []
    
    if row:
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="bet_back")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å—Ç–∞–≤–æ–∫: message_id={message.message_id}")

async def bet_amount_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"bet_amount_callback –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {query.data}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    callback_data = query.data
    
    if callback_data == "bet_back":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ù–∞–∑–∞–¥", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç–∞
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥', –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç–∞")
        await bet_command(update, context)
        return
    
    if not callback_data.startswith(BET_AMOUNT_PREFIX):
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å callback_data: {callback_data}")
        return
    
    try:
        amount = int(callback_data[len(BET_AMOUNT_PREFIX):])
        logging.info(f"–í—ã–±—Ä–∞–Ω–∞ —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {amount}")
    except ValueError:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏: {callback_data[len(BET_AMOUNT_PREFIX):]}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    event_id = context.user_data.get("bet_event_id")
    option_id = context.user_data.get("bet_option_id")
    event_message_id = context.user_data.get("event_message_id")
    
    logging.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: event_id={event_id}, option_id={option_id}, event_message_id={event_message_id}")
    
    if not event_id or not option_id:
        logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await query.answer(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /bet.",
            show_alert=True
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–æ
    betting_events = load_betting_events()
    event_is_active = False
    
    for e in betting_events.get("events", []):
        if str(e.get("id")) == str(event_id) and e.get("is_active", True):
            event_is_active = True
            logging.info(f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –∞–∫—Ç–∏–≤–Ω–æ")
            break
    
    if not event_is_active:
        logging.warning(f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")
        # –í–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ö†Ô∏è –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ –¥–ª—è —Å—Ç–∞–≤–æ–∫. –í—Ä–µ–º—è —Å—Ç–∞–≤–æ–∫ –∏—Å—Ç–µ–∫–ª–æ.",
            parse_mode="Markdown"
        )
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=query.message.message_id
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return
    
    # –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É
    user_id = update.effective_user.id
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –±–µ–∑ @
    username = update.effective_user.username
    user_name = username if username else update.effective_user.full_name or "Unknown"
    
    logging.info(f"–†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É: user_id={user_id}, user_name={user_name}, event_id={event_id}, option_id={option_id}, amount={amount}")
    
    success = place_bet(user_id, user_name, event_id, option_id, amount)
    
    if not success:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å—Ç–∞–≤–∫—É")
        await query.answer(
            text="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å—Ç–∞–≤–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ.",
            show_alert=True
        )
        return
    
    logging.info("–°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ
    event = None
    option_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
    
    for e in betting_events.get("events", []):
        if str(e.get("id")) == str(event_id):
            event = e
            for opt in e.get("options", []):
                if str(opt.get("id")) == str(option_id):
                    option_text = opt.get("text")
                    break
            break
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
    new_balance = get_balance(user_id)
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞–≤–∫–µ
    text = f"‚úÖ –°—Ç–∞–≤–∫–∞ {user_name} –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
    text += f"üéØ *{option_text}*\n"
    text += f"üí∏ –°—É–º–º–∞: *{amount}* üíµ\n\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        parse_mode="Markdown"
    )
    
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏: message_id={message.message_id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    messages_to_delete = [query.message.message_id]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å—Ç–∞–≤–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if event_message_id:
        messages_to_delete.append(event_message_id)
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ä–∞–∑—É
    for msg_id in messages_to_delete:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=msg_id
            )
            logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: message_id={msg_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def delete_temp_messages(context: CallbackContext, message_ids: list, chat_id: int):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –§—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö –∫–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç JobQueue
        message_ids: –°–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        chat_id: ID —á–∞—Ç–∞
    """
    for message_id in message_ids:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–∞–≤–æ–∫.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ callback –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
    query = update.callback_query
    
    if query:
        # –≠—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏
        await query.answer()
        chat_id = update.effective_chat.id
    else:
        # –≠—Ç–æ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        chat_id = update.effective_chat.id
    
    history = get_betting_history(limit=5)
    
    if not history:
        message = "üìú –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –ø—É—Å—Ç–∞. –î–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫–∏! üé≤"
        if query:
            await query.edit_message_text(text=message)
        else:
            await context.bot.send_message(chat_id=chat_id, text=message)
        return
    
    text = "üìú *–ò–°–¢–û–†–ò–Ø –°–¢–ê–í–û–ö* üìä\n\n"
    
    for i, entry in enumerate(history):
        event_date = entry.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        description = entry.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ")
        question = entry.get("question", "")
        result_description = entry.get("result_description", "")
        
        text += f"üìÖ *{event_date}*\n"
        text += f"üéÆ {description}\n"
        
        if question:
            text += f"‚ùì {question}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–∞–≤–æ–∫ —Å –æ—Ç–º–µ—Ç–∫–æ–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        options = entry.get("options", [])
        if options:
            text += "\n*–í–∞—Ä–∏–∞–Ω—Ç—ã:*\n"
            for option in options:
                option_text = option.get("text", "")
                is_winner = str(option.get("id")) == str(entry.get("winner_option_id"))
                winner_mark = " ‚úÖ" if is_winner else ""
                text += f"‚Ä¢ {option_text}{winner_mark}\n"
        
        if result_description:
            text += f"\nüìù {result_description}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–µ –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ
        tote_coefficient = entry.get("tote_coefficient", 0)
        total_bets = entry.get("total_bets", 0)
        
        if tote_coefficient > 0:
            text += f"\nüí∞ –ë–∞–Ω–∫: {total_bets} üíµ | –ö–æ—ç—Ñ—Ñ: x{tote_coefficient:.2f}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ
        winners = entry.get("winners", [])
        losers = entry.get("losers", [])
        
        if winners:
            text += "\nüèÜ *–°—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–∏:*\n"
            for winner in winners:
                user_name = winner.get("user_name", "Unknown")
                win_amount = winner.get("win_amount", 0)
                bet_amount = winner.get("bet_amount", 0) if "bet_amount" in winner else 0
                streak = winner.get("streak", 0)
                
                streak_emoji = " üî•" if streak >= 3 else ""
                text += f"‚Ä¢ {user_name}: +{win_amount} üíµ{streak_emoji}\n"
        
        if losers:
            text += "\nüí∏ *–ù–µ –ø–æ–≤–µ–∑–ª–æ:*\n"
            max_losers = 3  # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
            for idx, loser in enumerate(losers[:max_losers]):
                user_name = loser.get("user_name", "Unknown")
                loss_amount = loser.get("loss_amount", 0)
                
                text += f"‚Ä¢ {user_name}: -{loss_amount} üíµ\n"
            
            if len(losers) > max_losers:
                text += f"‚Ä¢ –∏ –µ—â–µ {len(losers) - max_losers} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å
        if i < len(history) - 1:
            text += "\n" + "üé≤" * 5 + "\n\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
    if query:
        try:
            await query.edit_message_text(
                text=text, 
                parse_mode="Markdown"
            )
        except Exception as e:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è,
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode="Markdown"
            )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode="Markdown"
        )

async def publish_betting_event(context: CallbackContext):
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å—Ç–∞–≤–æ–∫.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç JobQueue
    """
    app = context.application # –ü–æ–ª—É—á–∞–µ–º app –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    from betting import get_next_active_event
    from config import POST_CHAT_ID
    from config import schedule_config, TIMEZONE_OFFSET
    import state
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–≤–æ–∫
    if not state.betting_enabled:
        logging.info("–°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–≤–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏—è.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    betting_config = schedule_config.get("betting", {})
    results_time = betting_config.get("results_time", "21:00")
    close_time = betting_config.get("close_time", "20:00")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    next_event = get_next_active_event()
    
    if not next_event:
        logging.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
    if not next_event.get("is_active", True):
        logging.warning(f"–°–æ–±—ã—Ç–∏–µ —Å ID {next_event.get('id')} –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        return
    
    # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    event_id = next_event.get("id")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    description = next_event.get("description", "")
    question = next_event.get("question", "")
    options = next_event.get("options", [])
    
    text = "üìä *–ù–û–í–û–ï –°–û–ë–´–¢–ò–ï –î–õ–Ø –°–¢–ê–í–û–ö!* üé≤\n\n"
    text += f"üìå *{description}*\n\n"
    text += f"‚ùì *{question}*\n\n"
    text += "üéØ *–í–∞—Ä–∏–∞–Ω—Ç—ã:*\n"
    
    for option in options:
        option_text = option.get("text", "")
        text += f"‚Ä¢ {option_text}\n"
    
    text += f"\nüí∞ –°–¥–µ–ª–∞–π—Ç–µ –≤–∞—à–∏ —Å—Ç–∞–≤–∫–∏!\n"
    text += f"‚è∞ –ü—Ä–∏–µ–º —Å—Ç–∞–≤–æ–∫ –¥–æ {close_time} (UTC+{TIMEZONE_OFFSET})\n"
    text += f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ {results_time} (UTC+{TIMEZONE_OFFSET})\n\n"
    text += "–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bet"
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å—Ç–∞–≤–∫–∏
    keyboard = [
        [InlineKeyboardButton("üí∏ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É üé≤", callback_data=f"bet_event_{event_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ POST_CHAT_ID —Å –∫–Ω–æ–ø–∫–æ–π
    await app.bot.send_message(
        chat_id=POST_CHAT_ID,
        text=text,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    
    # –ù–ï –ø–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!
    # –°–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏
    # –°—Ç–∞–≤–∫–∏ –±—É–¥—É—Ç –∑–∞–∫—Ä—ã—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤ close_time
    
    logging.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å—Ç–∞–≤–æ–∫ (ID: {event_id}) –≤ —á–∞—Ç {POST_CHAT_ID}")

async def process_betting_results(context: CallbackContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–≤–æ–∫ –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –∏—Ö –≤ —á–∞—Ç–µ.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç JobQueue
    """
    app = context.application # –ü–æ–ª—É—á–∞–µ–º app –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    from betting import load_betting_events, process_event_results
    from config import POST_CHAT_ID, ADMIN_GROUP_ID
    import state
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–≤–æ–∫
    if not state.betting_enabled:
        logging.info("–°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–≤–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è, –≥–æ—Ç–æ–≤—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
    # - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
    # - —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º winner_option_id
    # - –±–µ–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    events_data = load_betting_events()
    events_for_results = []
    
    for event in events_data.get("events", []):
        if (not event.get("is_active", True) and 
            event.get("winner_option_id") is not None and 
            not event.get("results_published", False)):
            events_for_results.append(event)
    
    if not events_for_results:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        logging.warning("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–∞–≤–æ–∫")
        await app.bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–∞–≤–æ–∫."
        )
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(events_for_results)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    for event_for_results in events_for_results:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–æ–±–µ–¥–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
        winner_option_id = event_for_results.get("winner_option_id")
        event_id = event_for_results.get("id")
        
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è ID: {event_id}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = process_event_results(event_id, winner_option_id)
        
        if results.get("status") != "success":
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–±—ã—Ç–∏—è {event_id}: {results.get('message')}")
            continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        description = event_for_results.get("description", "")
        question = event_for_results.get("question", "")
        correct_option = results.get("correct_option", {})
        correct_option_text = correct_option.get("text", "")
        result_description = event_for_results.get("result_description", "")
        
        text = "üèÅ *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¢–ê–í–û–ö!* üé≤\n\n"
        text += f"üìå *{description}*\n\n"
        text += f"‚ùì *{question}*\n"
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        text += f"‚úÖ *{correct_option_text}*\n"
        
        if result_description:
            text += f"üìù {result_description}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ
        tote_coefficient = results.get("tote_coefficient", 1.0)
        total_bets = results.get("total_bets", 0)
        
        text += f"\nüí∞ –ë–∞–Ω–∫: {total_bets} üíµ | –ö–æ—ç—Ñ—Ñ: x{tote_coefficient:.2f}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö –≤ –±–æ–ª–µ–µ –≤–µ—Å–µ–ª–æ–º —Å—Ç–∏–ª–µ
        winners = results.get("winners", [])
        if winners:
            text += "\nüèÜ *–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!*\n"
            for winner in winners:
                user_name = winner.get("user_name", "Unknown")
                win_amount = winner.get("win_amount", 0)
                bet_amount = winner.get("bet_amount", 0)
                streak = winner.get("streak", 0)
                
                streak_emoji = " üî•" if streak >= 3 else ""
                text += f"‚Ä¢ {user_name}: +{win_amount} üíµ{streak_emoji}\n"
        else:
            text += "\nüò¢ *–í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–∏–∫—Ç–æ –Ω–µ —É–≥–∞–¥–∞–ª!* ü§∑‚Äç‚ôÇÔ∏è\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –≤ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
        losers = results.get("losers", [])
        if losers:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –≤—Å–µ–≥–¥–∞, –∫–æ–≥–¥–∞ –æ–Ω–∏ –µ—Å—Ç—å
            text += "\nüí∏ *–ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑:*\n"
            max_losers = 3  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
            for idx, loser in enumerate(losers[:max_losers]):
                user_name = loser.get("user_name", "Unknown")
                loss_amount = loser.get("loss_amount", 0)
                
                text += f"‚Ä¢ {user_name}: -{loss_amount} üíµ\n"
            
            if len(losers) > max_losers:
                text += f"‚Ä¢ –∏ –µ—â–µ {len(losers) - max_losers} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ POST_CHAT_ID –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
        await app.bot.send_message(
            chat_id=POST_CHAT_ID,
            text=text,
            parse_mode="Markdown"
        )
        
        logging.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–≤–æ–∫ (ID —Å–æ–±—ã—Ç–∏—è: {event_id}) –≤ —á–∞—Ç {POST_CHAT_ID}")
    
    # –û–±—â–∏–π –ª–æ–≥ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logging.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö {len(events_for_results)} —Å–æ–±—ã—Ç–∏–π")

async def close_betting_event(context: CallbackContext):
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å—Ç–∞–≤–æ–∫.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """
    app = context.application # –ü–æ–ª—É—á–∞–µ–º app –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    from betting import load_betting_events, save_betting_events
    from config import ADMIN_GROUP_ID
    import state
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–≤–æ–∫
    if not state.betting_enabled:
        logging.info("–°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–≤–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è.")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
    events_data = load_betting_events()
    active_event = None
    
    # –ù–∞–π–¥–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å
    for event in events_data.get("events", []):
        if event.get("is_active", True):
            active_event = event
            break
    
    if not active_event:
        logging.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
        return
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    event_id = active_event.get("id")
    success = publish_event(event_id)
    
    if success:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–±—ã—Ç–∏—è
        logging.info(f"–ó–∞–∫—Ä—ã—Ç–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å—Ç–∞–≤–æ–∫ (ID: {event_id})")
    else:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å—Ç–∞–≤–æ–∫ (ID: {event_id})")

async def start_betting_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞–≤–æ–∫.
    –í–∫–ª—é—á–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—Ç–∞–≤–æ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    """
    import state
    state.betting_enabled = True
    state.save_state(state.autopost_enabled, state.quiz_enabled, state.wisdom_enabled, state.betting_enabled)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–≤–æ–∫ –≤–∫–ª—é—á–µ–Ω–∞!")

async def stop_betting_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞–≤–æ–∫.
    –û—Ç–∫–ª—é—á–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—Ç–∞–≤–æ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    """
    import state
    state.betting_enabled = False
    state.save_state(state.autopost_enabled, state.quiz_enabled, state.wisdom_enabled, state.betting_enabled)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–≤–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞!")

async def results_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /results –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    next_event = get_next_active_event()
    
    if not next_event:
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è
    description = next_event.get("description", "")
    question = next_event.get("question", "")
    options = next_event.get("options", [])
    
    text = f"üìä *–í–´–ë–û–† –†–ï–ó–£–õ–¨–¢–ê–¢–ê –°–û–ë–´–¢–ò–Ø* üé≤\n\n"
    text += f"üìå *{description}*\n\n"
    text += f"‚ùì *{question}*\n\n"
    text += "üéØ *–í–∞—Ä–∏–∞–Ω—Ç—ã:*\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    keyboard = []
    for option in options:
        option_id = option.get("id")
        option_text = option.get("text")
        
        callback_data = f"result_{next_event.get('id')}_option_{option_id}"
        
        button = InlineKeyboardButton(
            f"{option_text}", 
            callback_data=callback_data
        )
        keyboard.append([button])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text=text + "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def results_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    query = update.callback_query
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    callback_data = query.data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
    if not callback_data.startswith("result_"):
        await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."
        )
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "result_EVENT_ID_option_OPTION_ID"
        parts = callback_data.split("_")
        event_id = parts[1]
        option_id = parts[3]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ ID
        event = get_betting_event_by_id(event_id)
        
        if not event:
            await query.answer("–û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ."
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è
        results = process_event_results(event_id, option_id)
        
        await query.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!\n\n–°–æ–±—ã—Ç–∏–µ: {event.get('description')}\n–ü–æ–±–µ–¥–∏–≤—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: {option_id}"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–±—ã—Ç–∏—è: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", show_alert=True)
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}"
        )

def get_betting_event_by_id(event_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ –µ–≥–æ ID.
    
    Args:
        event_id (str –∏–ª–∏ int): ID —Å–æ–±—ã—Ç–∏—è
    
    Returns:
        dict: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ None, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    """
    events_data = load_betting_events()
    
    for event in events_data.get("events", []):
        if str(event.get("id")) == str(event_id):
            return event
    
    return None

async def betting_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫.
    –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: "event_EVENT_ID_option_OPTION_ID"
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    query = update.callback_query
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    callback_data = query.data
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "event_EVENT_ID_option_OPTION_ID"
        parts = callback_data.split("_")
        
        if len(parts) != 4 or parts[0] != "event" or parts[2] != "option":
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        event_id = int(parts[1])
        option_id = int(parts[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        username = query.from_user.username
        
        # –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50)
        bet_amount = 50
        success = place_bet(user_id, username, event_id, option_id, bet_amount)
        
        if success:
            await query.answer("–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å—É–º–º—É {bet_amount} üíµ –ø—Ä–∏–Ω—è—Ç–∞!"
            )
        else:
            await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å—Ç–∞–≤–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å.", show_alert=True)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏: {e}")
        await query.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True) 