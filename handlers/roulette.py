# handlers/roulette.py
"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /roulette - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Ä—É–ª–µ—Ç–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º.
–†–µ–∞–ª–∏–∑—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞,
–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
"""
import random
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import ContextTypes
from utils import check_chat_and_execute
from state import ROULETTE_DATA

def format_roulette_list(roulette_dict: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    –ó–∞—á–µ—Ä–∫–∏–≤–∞–µ—Ç —É–∂–µ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.
    
    Args:
        roulette_dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä—É–ª–µ—Ç–∫–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    """
    original_list = roulette_dict["original_list"]
    removed_ids = roulette_dict["removed_list"]
    lines = []
    for item in original_list:
        if item["id"] in removed_ids:
            lines.append(f"<s>üî¥ {item['value']}</s>")
        else:
            lines.append(f"üü¢ {item['value']}")
    return "\n".join(lines)

def build_roulette_keyboard(roulette_dict: dict) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ä—É–ª–µ—Ç–∫–æ–π.
    
    Args:
        roulette_dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä—É–ª–µ—Ç–∫–∏
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ö—Ä—É—Ç–∏—Ç—å" –∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
    """
    current_list = roulette_dict["current_list"]
    if len(current_list) > 1:
        keyboard = [
            [
                InlineKeyboardButton("–ö—Ä—É—Ç–∏—Ç—å üé∞", callback_data="roulette|spin"),
                InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÅ", callback_data="roulette|startover")
            ]
        ]
    else:
        keyboard = [
            [
                InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÅ", callback_data="roulette|startover")
            ]
        ]
    return InlineKeyboardMarkup(keyboard)

async def roulette_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /roulette.
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Ä—É–ª–µ—Ç–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    async def _roulette_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text  # –ù–∞–ø—Ä–∏–º–µ—Ä: "/roulette –§–∏–ª—å–º1, –§–∏–ª—å–º2, –§–∏–ª—å–º1"
        _, _, text_after_command = text.partition(" ")

        if not text_after_command.strip():
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=(
                    "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ø–æ—Å–ª–µ /roulette.\n"
                    "–ü—Ä–∏–º–µ—Ä:\n/roulette –§–∏–ª—å–º1, –§–∏–ª—å–º2, –§–∏–ª—å–º1"
                )
            )
            return

        variants = [v.strip() for v in text_after_command.split(",") if v.strip()]
        if not variants:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
            return

        chat_id = update.effective_chat.id
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
        items = [{"id": i, "value": variant} for i, variant in enumerate(variants)]
        ROULETTE_DATA[chat_id] = {
            "original_list": items,
            "current_list": items[:],
            "removed_list": []  # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å id —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        }

        roulette_dict = ROULETTE_DATA[chat_id]
        text_list = format_roulette_list(roulette_dict)
        keyboard = build_roulette_keyboard(roulette_dict)

        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–†–û–õ–Ø–Ø–Ø–ï–ú! üéâ\n\n{text_list}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    await check_chat_and_execute(update, context, _roulette_command)

async def roulette_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    chat_id = query.message.chat_id

    if chat_id not in ROULETTE_DATA:
        await query.edit_message_text(
            text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä—É–ª–µ—Ç–∫–∏. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /roulette."
        )
        return

    action = data.split("|")[1]
    roulette_dict = ROULETTE_DATA[chat_id]

    if action == "spin":
        if len(roulette_dict["current_list"]) > 1:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
            removed_item = random.choice(roulette_dict["current_list"])
            roulette_dict["current_list"].remove(removed_item)
            roulette_dict["removed_list"].append(removed_item["id"])

            text_list = format_roulette_list(roulette_dict)
            if len(roulette_dict["current_list"]) == 1:
                winner = roulette_dict["current_list"][0]
                text_list += f"\n\n–ì–û–û–û–û–û–û–û–û–û–õ! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{winner['value']}</b> üéä"

            keyboard = build_roulette_keyboard(roulette_dict)
            await query.edit_message_text(
                text=f"–†–û–õ–Ø–Ø–Ø–ï–ú! üéâ\n\n{text_list}",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            text_list = format_roulette_list(roulette_dict)
            await query.edit_message_text(
                text=f"–†—É–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.\n\n{text_list}",
                parse_mode="HTML"
            )

    elif action == "startover":
        roulette_dict["current_list"] = roulette_dict["original_list"][:]
        roulette_dict["removed_list"] = []
        text_list = format_roulette_list(roulette_dict)
        keyboard = build_roulette_keyboard(roulette_dict)
        await query.edit_message_text(
            text=f"–†–û–õ–Ø–Ø–Ø–ï–ú! üéâ\n\n{text_list}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
