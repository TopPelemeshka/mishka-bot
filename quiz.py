# quiz.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω (–∫–≤–∏–∑–æ–≤) –≤ Telegram-—á–∞—Ç–µ.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –ó–∞–≥—Ä—É–∑–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
- –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω
"""

import os
import json
import random
import datetime

from telegram import Poll
from telegram.ext import ContextTypes

from config import POST_CHAT_ID, MATERIALS_DIR

from balance import update_balance

import state


# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
QUIZ_FILE = os.path.join(MATERIALS_DIR, "quiz.json")  # –∏—Å—Ö–æ–¥–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
RATING_FILE = "state_data/rating.json"                           # –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–≤—ë–∑–¥
PRAISES_FILE = "phrases/praises_rating.txt"  # —Ç–µ–∫—Å—Ç—ã –ø–æ—Ö–≤–∞–ª
PRAISE_INDEX_FILE = "state_data/praise_state.json"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —á—Ç–æ–±—ã –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
# key = poll_id (str), value = correct_option_id (int)
ACTIVE_QUIZZES = {}

WEEKLY_COUNT_FILE = "state_data/weekly_quiz_count.json"

def load_weekly_quiz_count() -> int:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∑–∞ –Ω–µ–¥–µ–ª—é –∏–∑ WEEKLY_COUNT_FILE.
    –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0.
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    """
    if not os.path.exists(WEEKLY_COUNT_FILE):
        return 0
    try:
        with open(WEEKLY_COUNT_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, dict) and "count" in data:
                return data["count"]
    except Exception as e:
        pass
    return 0

def save_weekly_quiz_count(count: int):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∑–∞ –Ω–µ–¥–µ–ª—é –≤ WEEKLY_COUNT_FILE.
    
    Args:
        count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    with open(WEEKLY_COUNT_FILE, "w", encoding="utf-8") as f:
        json.dump({"count": count}, f, ensure_ascii=False, indent=4)


def load_quiz_questions() -> list[dict]:
    """
    –°—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ quiz.json. –§–æ—Ä–º–∞—Ç:
    [
        {
            "question": "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –°–æ–ª–Ω—Ü—É?",
            "options": ["–í–µ–Ω–µ—Ä–∞", "–ó–µ–º–ª—è", "–ú–µ—Ä–∫—É—Ä–∏–π", "–ú–∞—Ä—Å"],
            "answer": "–ú–µ—Ä–∫—É—Ä–∏–π"
        },
        ...
    ]
    
    Returns:
        list[dict]: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
    """
    if not os.path.exists(QUIZ_FILE):
        return []
    with open(QUIZ_FILE, "r", encoding="utf-8") as f:
        try:
            data = json.load(f)
            if isinstance(data, list):
                return data
        except json.JSONDecodeError:
            return []
    return []


def save_quiz_questions(questions: list[dict]):
    """
    –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª quiz.json.
    
    Args:
        questions: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    with open(QUIZ_FILE, "w", encoding="utf-8") as f:
        json.dump(questions, f, ensure_ascii=False, indent=4)


def get_random_question() -> dict | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ quiz.json –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ —Ñ–∞–π–ª–∞,
    —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª—Å—è.
    
    Returns:
        dict|None: –°–ª–æ–≤–∞—Ä—å —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ None, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç
    """
    questions = load_quiz_questions()
    if not questions:
        return None
    question = random.choice(questions)
    questions.remove(question)
    save_quiz_questions(questions)
    return question


def load_rating() -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞:
          {
             "123456789": { "stars": 3, "name": "username_–∏–ª–∏_–∏–º—è" },
             "987654321": { "stars": 1, "name": "–¥—Ä—É–≥–æ–µ_–∏–º—è" }
          }
        –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –≤–µ—Ä–Ω—ë—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
    """
    if not os.path.exists(RATING_FILE):
        return {}
    try:
        with open(RATING_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, dict):
                return data
    except Exception as e:
        return {}

def save_rating(rating: dict):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤ JSON-—Ñ–∞–π–ª.
    
    Args:
        rating: –°–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞:
            dict[user_id_str] = { "stars": int, "name": str }
    """
    try:
        with open(RATING_FILE, "w", encoding="utf-8") as f:
            json.dump(rating, f, ensure_ascii=False, indent=4)
    except Exception as e:
        pass



def load_praises() -> list[str]:
    """
    –°—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ—Ä–∞–∑—ã –ø–æ—Ö–≤–∞–ª—ã –∏–∑ —Ñ–∞–π–ª–∞.
    
    Returns:
        list[str]: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Ñ—Ä–∞–∑–∞–º–∏ –ø–æ—Ö–≤–∞–ª—ã
    """
    if not os.path.exists(PRAISES_FILE):
        return ["–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –≤–µ–ª–∏–∫–æ–ª–µ–ø–µ–Ω!", "–ë–ª–µ—Å—Ç—è—â–∞—è –ø–æ–±–µ–¥–∞!"]
    with open(PRAISES_FILE, "r", encoding="utf-8") as f:
        lines = [line.strip() for line in f.readlines() if line.strip()]
        return lines if lines else ["–ú–æ–ª–æ–¥–µ—Ü!", "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"]
    

def load_praise_index() -> int:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ñ—Ä–∞–∑ –ø–æ—Ö–≤–∞–ª—ã.
    
    Returns:
        int: –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–ª–∏ 0, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
    """
    if not os.path.exists(PRAISE_INDEX_FILE):
        return 0
    try:
        with open(PRAISE_INDEX_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, dict) and "praise_index" in data:
                return data["praise_index"]
    except:
        pass
    return 0

def save_praise_index(index: int):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Ñ—Ä–∞–∑—ã –ø–æ—Ö–≤–∞–ª—ã.
    
    Args:
        index: –ò–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã
    """
    with open(PRAISE_INDEX_FILE, "w", encoding="utf-8") as f:
        json.dump({"praise_index": index}, f, ensure_ascii=False, indent=4)

def get_next_praise(praises: list[str]) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ —Å–ø–∏—Å–∫–∞ `praises` –ø–æ —Ü–∏–∫–ª—É.
    –°–æ—Å—Ç–æ—è–Ω–∏–µ (–∏–Ω–¥–µ–∫—Å) —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ praise_state.json.
    
    Args:
        praises: –°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ –ø–æ—Ö–≤–∞–ª—ã
    
    Returns:
        str: –°–ª–µ–¥—É—é—â–∞—è —Ñ—Ä–∞–∑–∞ –ø–æ—Ö–≤–∞–ª—ã
    """
    if not praises:
        return "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! (–Ω–µ—Ç —Ñ—Ä–∞–∑ –≤ praises)"

    current_index = load_praise_index()
    phrase = praises[current_index % len(praises)]
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    current_index += 1
    save_praise_index(current_index)
    return phrase


async def quiz_post_callback(context: ContextTypes.DEFAULT_TYPE):
    """
    Callback-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á Telegram
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–ª–∞–≥–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:
    if not state.quiz_enabled:
        return

    question_data = get_random_question()
    if not question_data:
        await context.bot.send_message(
            chat_id=POST_CHAT_ID,
            text="–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò¢"
        )
        return

    question_text = question_data["question"]
    original_options = question_data["options"]
    correct_answer = question_data["answer"]

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
    shuffled_options = original_options[:]
    random.shuffle(shuffled_options)
    try:
        correct_index = shuffled_options.index(correct_answer)
    except ValueError:
        correct_index = 0

    message = await context.bot.send_poll(
        chat_id=POST_CHAT_ID,
        question=question_text,
        options=shuffled_options,
        type=Poll.QUIZ,
        correct_option_id=correct_index,
        is_anonymous=False,
        allows_multiple_answers=False
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞:
    ACTIVE_QUIZZES[message.poll.id] = correct_index

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∑–∞ –Ω–µ–¥–µ–ª—é:
    current_count = load_weekly_quiz_count()
    current_count += 1
    save_weekly_quiz_count(current_count)



async def poll_answer_handler(update, context):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.
    –ù–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
    """
    poll_answer = update.poll_answer
    poll_id = poll_answer.poll_id
    user_id = poll_answer.user.id
    chosen_ids = poll_answer.option_ids  # –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    if poll_id not in ACTIVE_QUIZZES:
        return

    correct_index = ACTIVE_QUIZZES[poll_id]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (—Å–æ–≤–ø–∞–ª –∏–Ω–¥–µ–∫—Å)
    if correct_index in chosen_ids:
        rating = load_rating()
        user_id_str = str(user_id)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞
        old_data = rating.get(user_id_str, {"stars": 0, "name": None})
        old_data["stars"] = old_data.get("stars", 0) + 1  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–≤–µ–∑–¥—ã

        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tg_user = poll_answer.user
        name_candidate = tg_user.username if tg_user.username else tg_user.first_name
        if not name_candidate:
            name_candidate = f"User_{user_id_str}"  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç

        old_data["name"] = name_candidate

        rating[user_id_str] = old_data
        save_rating(rating)

        # –ù–∞—á–∏—Å–ª—è–µ–º 5 –º–æ–Ω–µ—Ç –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        update_balance(user_id, 5)  # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç




async def rating_command(update, context):
    """
    /rating ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∑–≤—ë–∑–¥),
    –∞ —Ç–∞–∫–∂–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –∏–∑ —Å–∫–æ–ª—å–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∑–≤–µ–∑–¥ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é).
    """
    rating = load_rating()
    weekly_count = load_weekly_quiz_count()  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥, –µ—Å–ª–∏ –±—ã –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ –≤–µ—Ä–Ω—ã–º–∏

    if not rating:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–≤–µ–∑–¥
    items = sorted(rating.items(), key=lambda x: x[1]["stars"], reverse=True)

    lines = [f"<b>–ó–≤–µ–∑–¥–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–º–∞–∫—Å–∏–º—É–º {weekly_count} ‚≠ê)</b>:"]
    for user_id_str, data in items:
        stars = data["stars"]
        name = data["name"] or user_id_str
        lines.append(f"‚Ä¢ {name}: {stars} ‚≠ê")

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="\n".join(lines),
        parse_mode="HTML"
    )



async def weekly_quiz_reset(context: ContextTypes.DEFAULT_TYPE):
    if not state.quiz_enabled:
        return

    rating = load_rating()
    if not rating:
        await context.bot.send_message(
            chat_id=POST_CHAT_ID,
            text="–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–ª –∑–≤—ë–∑–¥–æ—á–µ–∫ üò¢"
        )
        return

    max_stars = max(x["stars"] for x in rating.values())
    winners = [uid for (uid, val) in rating.items() if val["stars"] == max_stars]

    praises = load_praises()
    random_praise = get_next_praise(praises)

    lines = ["<b>–ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏!</b>"]
    lines.append(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {max_stars} ‚≠ê:")
    for w in winners:
        name = rating[w]["name"] or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"
        lines.append(f"‚Ä¢ {name}")
    lines.append("")
    lines.append(random_praise)
    lines.append("")
    lines.append("–ó–≤–µ–∑–¥–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ –Ω–µ–¥–µ–ª—é:")

    all_sorted = sorted(rating.items(), key=lambda x: x[1]["stars"], reverse=True)
    for _, val in all_sorted:
        stars = val["stars"]
        name = val["name"] or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"
        lines.append(f"‚Ä¢ {name}: {stars} ‚≠ê")

    await context.bot.send_message(
        chat_id=POST_CHAT_ID,
        text="\n".join(lines),
        parse_mode="HTML"
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–≤—ë–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
    for k in rating.keys():
        rating[k]["stars"] = 0
    save_rating(rating)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∑–∞ –Ω–µ–¥–µ–ª—é:
    save_weekly_quiz_count(0)



#
# === –ü–æ–¥—Å—á—ë—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤ ===
#

def count_quiz_questions() -> int:
    """–ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ quiz.json."""
    questions = load_quiz_questions()
    return len(questions)

#
# –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
#
async def start_quiz_command(update, context):
    state.quiz_enabled = True
    # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —è–≤–Ω–æ
    state.save_state(state.autopost_enabled, state.quiz_enabled)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏ –≤–∫–ª—é—á–µ–Ω—ã!"
    )

async def stop_quiz_command(update, context):
    state.quiz_enabled = False
    print("DEBUG: quiz_enabled =", state.quiz_enabled)
    state.save_state(state.autopost_enabled, state.quiz_enabled)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã!"
    )