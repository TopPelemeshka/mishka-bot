import pytest
import os
from pathlib import Path
from unittest.mock import patch, mock_open, MagicMock, AsyncMock, call, ANY

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–æ–¥—É–ª—å –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏/–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
try:
    import autopost
    from autopost import (
        _get_folder_by_category, # –•–æ—Ç—è –æ–Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è, –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º –µ—ë –æ—Ç–¥–µ–ª—å–Ω–æ
        autopost_10_pics_callback,
        autopost_4_videos_callback,
        stop_autopost_command,
        start_autopost_command,
        stats_command,
        next_posts_command
    )
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
    import state
    import config
    import utils_autopost
    import quiz
    import wisdom
    from telegram import InputMediaPhoto, InputMediaVideo
except ImportError as e:
    pytest.skip(f"–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ autopost: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å autopost –∏–ª–∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ({e}).", allow_module_level=True)

# --- –¢–µ—Å—Ç—ã –¥–ª—è _get_folder_by_category ---

# –ú–æ–∫–∞–µ–º –ø—É—Ç–∏ –≤ config –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
@pytest.fixture(autouse=True)
def mock_config_paths():
    with patch('config.ERO_ANIME_DIR', Path("/mock/ero-anime")), \
         patch('config.ERO_REAL_DIR', Path("/mock/ero-real")), \
         patch('config.SINGLE_MEME_DIR', Path("/mock/single-meme")), \
         patch('config.STANDART_ART_DIR', Path("/mock/standart-art")), \
         patch('config.STANDART_MEME_DIR', Path("/mock/standart-meme")), \
         patch('config.VIDEO_MEME_DIR', Path("/mock/video-meme")), \
         patch('config.VIDEO_ERO_DIR', Path("/mock/video-ero")), \
         patch('config.VIDEO_AUTO_DIR', Path("/mock/video-auto")), \
         patch('config.POST_CHAT_ID', -4737984792): # –ú–æ–∫ ID —á–∞—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–æ–≤
        yield

def test_get_folder_by_category_known():
    assert _get_folder_by_category("ero-anime") == Path("/mock/ero-anime")
    assert _get_folder_by_category("standart-meme") == Path("/mock/standart-meme")
    assert _get_folder_by_category("video-auto") == Path("/mock/video-auto")

def test_get_folder_by_category_unknown():
    assert _get_folder_by_category("unknown-category") is None

# --- –¢–µ—Å—Ç—ã –¥–ª—è autopost_10_pics_callback ---

@pytest.mark.asyncio
@patch('autopost.state.autopost_enabled', True)
@patch('autopost.get_top_anecdote_and_remove')
@patch('autopost.get_random_file_from_folder')
@patch('autopost.is_valid_file', return_value=True) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ñ–∞–π–ª—ã –≤–∞–ª–∏–¥–Ω—ã
@patch('builtins.open', new_callable=mock_open, read_data=b'test data') # –ú–æ–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤
@patch('autopost.move_file_to_archive')
async def test_autopost_10_pics_success(mock_move, mock_open_file, mock_is_valid, mock_get_random, mock_get_anecdote):
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_media_group = AsyncMock()
    context.bot.send_message = AsyncMock()
    
    mock_get_anecdote.return_value = "–¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–µ–∫–¥–æ—Ç"
    # –ù–∞—Å—Ç—Ä–æ–∏–º get_random_file_from_folder, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏
    file_paths = [f"/mock/path/img{i}.jpg" for i in range(10)]
    mock_get_random.side_effect = file_paths
    
    await autopost_10_pics_callback(context)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    mock_get_anecdote.assert_called_once()
    assert mock_get_random.call_count == 10 # –î–æ–ª–∂–Ω—ã –±—ã–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å 10 —Ñ–∞–π–ª–æ–≤
    assert mock_open_file.call_count == 10 # 10 —Ä–∞–∑ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è InputMediaPhoto
    assert mock_is_valid.call_count == 10 # 10 —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
    context.bot.send_media_group.assert_awaited_once()
    args, kwargs = context.bot.send_media_group.call_args
    assert kwargs['chat_id'] == -4737984792
    assert len(kwargs['media']) == 10
    assert all(isinstance(m, InputMediaPhoto) for m in kwargs['media'])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞
    context.bot.send_message.assert_awaited_once_with(chat_id=-4737984792, text="–¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–µ–∫–¥–æ—Ç", read_timeout=180)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤
    assert mock_move.call_count == 10
    # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–∑–æ–≤–æ–≤ move_file_to_archive —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ `categories` –≤ —Ñ—É–Ω–∫—Ü–∏–∏
    mock_move.assert_any_call(file_paths[0], "ero-real")
    mock_move.assert_any_call(file_paths[1], "standart-art") # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å 'standart-art/standart-meme'
    mock_move.assert_any_call(file_paths[2], "ero-anime")
    # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö 10

@pytest.mark.asyncio
@patch('autopost.state.autopost_enabled', False)
@patch('autopost.get_top_anecdote_and_remove')
async def test_autopost_10_pics_disabled(mock_get_anecdote):
    context = MagicMock()
    context.bot = AsyncMock()
    await autopost_10_pics_callback(context)
    mock_get_anecdote.assert_not_called()
    context.bot.send_media_group.assert_not_awaited()
    context.bot.send_message.assert_not_awaited()

@pytest.mark.asyncio
@patch('autopost.state.autopost_enabled', True)
@patch('autopost.get_top_anecdote_and_remove', return_value=None) # –ê–Ω–µ–∫–¥–æ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
async def test_autopost_10_pics_no_anecdote(mock_get_anecdote):
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()
    
    await autopost_10_pics_callback(context)
    
    mock_get_anecdote.assert_called_once()
    context.bot.send_message.assert_awaited_once_with(chat_id=-4737984792, text="–ê–Ω–µ–∫–¥–æ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò≠")
    context.bot.send_media_group.assert_not_awaited()

@pytest.mark.asyncio
@patch('autopost.state.autopost_enabled', True)
@patch('autopost.get_top_anecdote_and_remove', return_value="–ê–Ω–µ–∫–¥–æ—Ç –µ—Å—Ç—å")
@patch('autopost.get_random_file_from_folder', return_value=None) # –§–∞–π–ª—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
async def test_autopost_10_pics_no_file(mock_get_random, mock_get_anecdote):
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()
    
    await autopost_10_pics_callback(context)
    
    mock_get_anecdote.assert_called_once()
    mock_get_random.assert_called() # –ü—ã—Ç–∞–ª–∏—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª
    # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'ero-real'
    context.bot.send_message.assert_awaited_with(
        chat_id=-4737984792,
        text="–£ –Ω–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ero-real üò≠"
    )
    context.bot.send_media_group.assert_not_awaited()

@pytest.mark.asyncio
@patch('autopost.state.autopost_enabled', True)
@patch('autopost.get_top_anecdote_and_remove', return_value="–ê–Ω–µ–∫–¥–æ—Ç –µ—Å—Ç—å")
@patch('autopost.get_random_file_from_folder')
@patch('autopost.is_valid_file', return_value=False) # –§–∞–π–ª –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
@patch('autopost.logger')
async def test_autopost_10_pics_invalid_file(mock_logger, mock_is_valid, mock_get_random, mock_get_anecdote):
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()
    mock_get_random.return_value = "/path/to/invalid.jpg"

    await autopost_10_pics_callback(context)
    
    mock_get_anecdote.assert_called_once()
    mock_get_random.assert_called() # –ü—ã—Ç–∞–ª–∏—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª
    mock_is_valid.assert_called_with("/path/to/invalid.jpg")
    mock_logger.error.assert_called_once()
    context.bot.send_message.assert_awaited_with(
        chat_id=-4737984792,
        text=f"–§–∞–π–ª –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ero-real –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É: /path/to/invalid.jpg" # –ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    )
    context.bot.send_media_group.assert_not_awaited()

@pytest.mark.asyncio
@patch('autopost.state.autopost_enabled', True)
@patch('autopost.get_top_anecdote_and_remove', return_value="–ê–Ω–µ–∫–¥–æ—Ç")
@patch('autopost.get_random_file_from_folder')
@patch('autopost.is_valid_file', return_value=True)
@patch('builtins.open', new_callable=mock_open, read_data=b'data')
@patch('autopost.logger')
async def test_autopost_10_pics_send_error(mock_logger, mock_open_file, mock_is_valid, mock_get_random, mock_get_anecdote):
    context = MagicMock()
    context.bot = AsyncMock()
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
    send_error = Exception("Telegram API error")
    context.bot.send_media_group.side_effect = send_error
    context.bot.send_message = AsyncMock() # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    
    file_paths = [f"/mock/path/img{i}.jpg" for i in range(10)]
    mock_get_random.side_effect = file_paths

    await autopost_10_pics_callback(context)

    context.bot.send_media_group.assert_awaited_once() # –ë—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    mock_logger.error.assert_called_once()
    context.bot.send_message.assert_awaited_with(chat_id=-4737984792, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {send_error}")

# --- –¢–µ—Å—Ç—ã –¥–ª—è autopost_4_videos_callback ---
# (–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ autopost_10_pics_callback, –Ω–æ —Å InputMediaVideo –∏ –ª–æ–≥–∏–∫–æ–π —Ñ–æ–ª–±–µ–∫–∞)

@pytest.mark.asyncio
@patch('autopost.state.autopost_enabled', True)
@patch('autopost.get_top_anecdote_and_remove', return_value="–ê–Ω–µ–∫–¥–æ—Ç –í–∏–¥–µ–æ")
@patch('autopost.get_random_file_from_folder')
@patch('autopost.is_valid_file', return_value=True)
@patch('builtins.open', new_callable=mock_open, read_data=b'video data')
@patch('autopost.move_file_to_archive')
async def test_autopost_4_videos_success(mock_move, mock_open_file, mock_is_valid, mock_get_random, mock_get_anecdote):
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_media_group = AsyncMock()
    context.bot.send_message = AsyncMock()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ side_effect –¥–ª—è get_random_file_from_folder
    # video-meme, video-ero, video-auto, video-auto
    mock_get_random.side_effect = [
        "/path/meme.mp4",   # –¥–ª—è video-meme
        "/path/ero.mp4",    # –¥–ª—è video-ero
        "/path/auto1.mp4",  # –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ video-auto
        "/path/auto2.mp4"   # –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ video-auto
    ]

    await autopost_4_videos_callback(context)

    mock_get_anecdote.assert_called_once()
    assert mock_get_random.call_count == 4
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞–ø–∫–∞–º–∏
    mock_get_random.assert_has_calls([
        call(Path("/mock/video-meme")),
        call(Path("/mock/video-ero")),
        call(Path("/mock/video-auto")),
        call(Path("/mock/video-auto"))
    ])
    assert mock_open_file.call_count == 4
    assert mock_is_valid.call_count == 4

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
    context.bot.send_media_group.assert_awaited_once()
    args, kwargs = context.bot.send_media_group.call_args
    assert kwargs['chat_id'] == -4737984792
    assert len(kwargs['media']) == 4
    assert all(isinstance(m, InputMediaVideo) for m in kwargs['media'])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞
    context.bot.send_message.assert_awaited_once_with(chat_id=-4737984792, text="–ê–Ω–µ–∫–¥–æ—Ç –í–∏–¥–µ–æ", read_timeout=180)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤
    assert mock_move.call_count == 4
    mock_move.assert_has_calls([
        call("/path/auto1.mp4", "video-auto"),
        call("/path/meme.mp4", "video-meme"),
        call("/path/ero.mp4", "video-ero"),
        call("/path/auto2.mp4", "video-auto")
    ], any_order=True)

@pytest.mark.asyncio
@patch('autopost.state.autopost_enabled', True)
@patch('autopost.get_top_anecdote_and_remove', return_value="–ê–Ω–µ–∫–¥–æ—Ç –§–æ–ª–ª–±—ç–∫")
@patch('autopost.get_random_file_from_folder')
@patch('autopost.is_valid_file', return_value=True)
@patch('builtins.open', new_callable=mock_open, read_data=b'video data')
@patch('autopost.move_file_to_archive')
async def test_autopost_4_videos_fallback_logic(mock_move, mock_open_file, mock_is_valid, mock_get_random, mock_get_anecdote):
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_media_group = AsyncMock()
    context.bot.send_message = AsyncMock()

    # –ò–º–∏—Ç–∏—Ä—É–µ–º: –ø–µ—Ä–≤—ã–π auto –µ—Å—Ç—å, meme –µ—Å—Ç—å, ero –Ω–µ—Ç, –≤—Ç–æ—Ä–æ–π auto –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –µ—â–µ meme –¥–ª—è –∑–∞–º–µ–Ω—ã
    mock_get_random.side_effect = [
        "/path/auto1.mp4",  # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ video-auto
        "/path/meme1.mp4",  # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –¥–ª—è video-meme
        None,               # –¢—Ä–µ—Ç–∏–π –≤—ã–∑–æ–≤ –¥–ª—è video-ero (–Ω–µ—Ç)
        "/path/meme2.mp4",  # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤—ã–∑–æ–≤ –¥–ª—è video-meme (–∑–∞–º–µ–Ω–∞ ero)
        None,               # –ü—è—Ç—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ video-auto (–Ω–µ—Ç)
        "/path/meme3.mp4"   # –®–µ—Å—Ç–æ–π –≤—ã–∑–æ–≤ –¥–ª—è video-meme (–∑–∞–º–µ–Ω–∞ –≤—Ç–æ—Ä–æ–≥–æ auto)
    ]

    await autopost_4_videos_callback(context)

    assert mock_get_random.call_count == 6
    mock_get_random.assert_has_calls([
        call(Path("/mock/video-auto")),  # –ò—â–µ–º –ø–µ—Ä–≤—ã–π auto
        call(Path("/mock/video-meme")),  # –ò—â–µ–º meme
        call(Path("/mock/video-ero")),   # –ò—â–µ–º ero - –Ω–µ—Ç
        call(Path("/mock/video-meme")),  # –ò—â–µ–º meme (–∑–∞–º–µ–Ω–∞ ero)
        call(Path("/mock/video-auto")),  # –ò—â–µ–º –≤—Ç–æ—Ä–æ–π auto - –Ω–µ—Ç
        call(Path("/mock/video-meme"))   # –ò—â–µ–º meme (–∑–∞–º–µ–Ω–∞ –≤—Ç–æ—Ä–æ–≥–æ auto)
    ])
    assert mock_open_file.call_count == 4
    assert mock_is_valid.call_count == 4

    context.bot.send_media_group.assert_awaited_once()
    args, kwargs = context.bot.send_media_group.call_args
    assert len(kwargs['media']) == 4

    context.bot.send_message.assert_awaited_once_with(chat_id=-4737984792, text="–ê–Ω–µ–∫–¥–æ—Ç –§–æ–ª–ª–±—ç–∫", read_timeout=180)

    assert mock_move.call_count == 4
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–º–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞—Ä—Ö–∏–≤–∏—Ä—É—é—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    mock_move.assert_has_calls([
        call("/path/auto1.mp4", "video-auto"),
        call("/path/meme1.mp4", "video-meme"),
        call("/path/meme2.mp4", "video-meme"), # ero –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ meme
        call("/path/meme3.mp4", "video-meme")  # –≤—Ç–æ—Ä–æ–π auto –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ meme
    ], any_order=True)

# ... (–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –Ω–∞ —Å–ª—É—á–∞–∏ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è —Ñ–æ–ª–±–µ–∫–∞, –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —Ç.–¥.) ...

# --- –¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ --- 

@pytest.mark.asyncio
@patch('autopost.state.save_state')
async def test_start_autopost_command(mock_save_state):
    update = MagicMock()
    update.effective_chat.id = 987
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()
    # –ú–æ–∫–∞–µ–º –¥—Ä—É–≥–∏–µ —Ñ–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    autopost.state.quiz_enabled = True
    autopost.state.wisdom_enabled = True
    autopost.state.autopost_enabled = False # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await start_autopost_command(update, context)

    assert autopost.state.autopost_enabled is True
    mock_save_state.assert_called_once_with(True, True, True) # autopost, quiz, wisdom
    context.bot.send_message.assert_awaited_once_with(chat_id=987, text="–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–∫–ª—é—á—ë–Ω!")

@pytest.mark.asyncio
@patch('autopost.state.save_state')
async def test_stop_autopost_command(mock_save_state):
    update = MagicMock()
    update.effective_chat.id = 987
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()
    # –ú–æ–∫–∞–µ–º –¥—Ä—É–≥–∏–µ —Ñ–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    autopost.state.quiz_enabled = False
    autopost.state.wisdom_enabled = True
    autopost.state.autopost_enabled = True # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await stop_autopost_command(update, context)

    assert autopost.state.autopost_enabled is False
    mock_save_state.assert_called_once_with(False, False, True) # autopost, quiz, wisdom
    context.bot.send_message.assert_awaited_once_with(chat_id=987, text="–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Ç–∫–ª—é—á—ë–Ω!")

@pytest.mark.asyncio
@patch('autopost.get_available_stats')
@patch('autopost.count_quiz_questions')
@patch('autopost.count_wisdoms')
async def test_stats_command(mock_count_wisdoms, mock_count_quiz, mock_get_stats):
    mock_count_wisdoms.return_value = 3
    mock_count_quiz.return_value = 15
    
    update = MagicMock()
    update.effective_chat.id = 555
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()

    mock_stats_data = {
        'ero-anime': 10, 'ero-real': 5, 'single-meme': 20,
        'standart-art': 15, 'standart-meme': 30, 'video-meme': 8,
        'video-ero': 4, 'video-auto': 12, 'anecdotes': 50,
    }
    mock_get_stats.return_value = mock_stats_data

    await stats_command(update, context)

    mock_get_stats.assert_called_once()
    mock_count_quiz.assert_called_once()
    mock_count_wisdoms.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ send_message –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.bot.send_message.assert_awaited_once()
    args, kwargs = context.bot.send_message.call_args
    assert kwargs['chat_id'] == 555
    assert "–¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:" in kwargs['text']
    assert "anecdotes: 50" in kwargs['text']
    assert "–í–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã" in kwargs['text']
    assert "–¶–∏—Ç–∞—Ç –¥–Ω—è" in kwargs['text']

@pytest.mark.asyncio
@patch('autopost.get_available_stats')
@patch('autopost.predict_10pics_posts')
@patch('autopost.predict_4videos_posts')
@patch('autopost.predict_full_days')
async def test_next_posts_command(mock_predict_days, mock_predict_videos, mock_predict_pics, mock_get_stats):
    mock_predict_days.return_value = 9
    mock_predict_videos.return_value = 10
    mock_predict_pics.return_value = 25
    
    update = MagicMock()
    update.effective_chat.id = 666
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()
    context.job_queue = MagicMock()
    context.job_queue.jobs = MagicMock(return_value=[])
    
    mock_stats_data = {'some': 'stats'} # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –≤–∞–∂–Ω—ã, —Ç.–∫. predict –º–æ–∫–∞–µ–º
    mock_get_stats.return_value = mock_stats_data

    await next_posts_command(update, context)

    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç get_available_stats
    # mock_get_stats.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    context.bot.send_message.assert_awaited_once()
    args, kwargs = context.bot.send_message.call_args
    assert kwargs['chat_id'] == 666
    assert "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á" in kwargs['text'] 