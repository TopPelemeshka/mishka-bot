import pytest
from unittest.mock import patch, MagicMock, AsyncMock

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
try:
    from handlers.balance_command import balance_command
    import balance  # –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
except ImportError as e:
    pytest.skip(f"–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ balance_command: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å handlers.balance_command –∏–ª–∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ({e}).", allow_module_level=True)

@pytest.mark.asyncio
@patch('handlers.balance_command.load_balances')
async def test_balance_command_empty(mock_load_balances):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /balance –∫–æ–≥–¥–∞ –±–∞–ª–∞–Ω—Å –ø—É—Å—Ç"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
    mock_load_balances.return_value = {}
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è update –∏ context
    update = MagicMock()
    context = MagicMock()
    context.bot = AsyncMock()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º AsyncMock –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    update.effective_chat.id = 123
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await balance_command(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –±–∞–ª–∞–Ω—Å–∞
    context.bot.send_message.assert_awaited_once_with(
        chat_id=123,
        text="–ë–∞–ª–∞–Ω—Å –ø–æ–∫–∞ –ø—É—Å—Ç."
    )

@pytest.mark.asyncio
@patch('handlers.balance_command.load_balances')
async def test_balance_command_with_users(mock_load_balances):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /balance —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    mock_balances = {
        "123456": {"name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å1", "balance": 100},
        "789012": {"name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å2", "balance": 200},
        "345678": {"name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å3", "balance": 50}
    }
    mock_load_balances.return_value = mock_balances
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è update –∏ context
    update = MagicMock()
    context = MagicMock()
    context.bot = AsyncMock()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º AsyncMock –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    update.effective_chat.id = 123
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await balance_command(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    expected_text = "üí∞ –ë–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
    expected_text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å1: 100 üíµ\n"
    expected_text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å2: 200 üíµ\n"
    expected_text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å3: 50 üíµ\n"
    
    context.bot.send_message.assert_awaited_once_with(
        chat_id=123,
        text=expected_text
    )

@pytest.mark.asyncio
@patch('handlers.balance_command.load_balances')
async def test_balance_command_with_one_user(mock_load_balances):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /balance —Å –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –æ–¥–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    mock_balances = {
        "123456": {"name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å1", "balance": 100}
    }
    mock_load_balances.return_value = mock_balances
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è update –∏ context
    update = MagicMock()
    context = MagicMock()
    context.bot = AsyncMock()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º AsyncMock –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    update.effective_chat.id = 123
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await balance_command(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    expected_text = "üí∞ –ë–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
    expected_text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å1: 100 üíµ\n"
    
    context.bot.send_message.assert_awaited_once_with(
        chat_id=123,
        text=expected_text
    )

@pytest.mark.asyncio
@patch('handlers.balance_command.load_balances')
async def test_balance_command_with_zero_balance(mock_load_balances):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /balance —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    mock_balances = {
        "123456": {"name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å1", "balance": 0}
    }
    mock_load_balances.return_value = mock_balances
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è update –∏ context
    update = MagicMock()
    context = MagicMock()
    context.bot = AsyncMock()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º AsyncMock –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    update.effective_chat.id = 123
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await balance_command(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    expected_text = "üí∞ –ë–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
    expected_text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å1: 0 üíµ\n"
    
    context.bot.send_message.assert_awaited_once_with(
        chat_id=123,
        text=expected_text
    ) 