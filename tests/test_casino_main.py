import pytest
from unittest.mock import patch, MagicMock, AsyncMock, call

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–æ–¥—É–ª—å –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏
try:
    import casino.casino_main as casino_main # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Å –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º
    from casino.casino_main import (
        casino_command,
        casino_menu_without_balance,
        casino_callback_handler
    )
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
    import balance
    import casino.slots as casino_slots
    import casino.roulette as casino_roulette
    from telegram import Update, InlineKeyboardMarkup, User, CallbackQuery, Message
except ImportError as e:
    pytest.skip(f"–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ casino_main: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å casino.casino_main –∏–ª–∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ({e}).", allow_module_level=True)

# --- –¢–µ—Å—Ç—ã –¥–ª—è casino_command ---

@pytest.mark.asyncio
@patch('casino.casino_main.get_balance', return_value=100) # –ú–æ–∫ –±–∞–ª–∞–Ω—Å–∞
async def test_casino_command_from_message(mock_get_balance):
    """–¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ /casino –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    update = MagicMock(spec=Update)
    message = MagicMock(spec=Message)
    message.from_user = MagicMock(spec=User)
    message.from_user.id = 123
    message.from_user.is_bot = False
    message.from_user.first_name = "Tester"
    message.chat_id = 987
    update.message = message
    update.callback_query = None
    update.effective_user = message.from_user # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º effective_user
    
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()
    
    await casino_command(update, context)
    
    mock_get_balance.assert_called_once_with(123)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    context.bot.send_message.assert_awaited_once()
    args, kwargs = context.bot.send_message.call_args
    assert kwargs['chat_id'] == 987
    assert "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ, Tester!" in kwargs['text']
    assert "–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: 100 –º–æ–Ω–µ—Ç" in kwargs['text']
    assert isinstance(kwargs['reply_markup'], InlineKeyboardMarkup)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = kwargs['reply_markup'].inline_keyboard
    assert len(keyboard) == 2
    assert len(keyboard[0]) == 2
    assert keyboard[0][0].text == "üé∞ –°–ª–æ—Ç—ã"
    assert keyboard[0][0].callback_data == "casino:slots"
    assert keyboard[0][1].text == "üé≤ –†—É–ª–µ—Ç–∫–∞"
    assert keyboard[0][1].callback_data == "casino:roulette"
    assert keyboard[1][0].text == "üö™ –í—ã–π—Ç–∏"
    assert keyboard[1][0].callback_data == "casino:exit"

@pytest.mark.asyncio
@patch('casino.casino_main.get_balance', return_value=50)
async def test_casino_command_from_callback(mock_get_balance):
    """–¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ –∫–∞–∑–∏–Ω–æ –∏–∑ callback (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é)."""
    update = MagicMock(spec=Update)
    callback_query = MagicMock(spec=CallbackQuery)
    callback_query.from_user = MagicMock(spec=User)
    callback_query.from_user.id = 456
    callback_query.from_user.is_bot = False
    callback_query.from_user.first_name = "Player"
    callback_query.message = MagicMock(spec=Message)
    callback_query.message.chat_id = 777
    callback_query.message.delete = AsyncMock() # –ú–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    update.callback_query = callback_query
    update.message = None
    update.effective_user = callback_query.from_user
    
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()
    
    await casino_command(update, context)
    
    mock_get_balance.assert_called_once_with(456)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    callback_query.message.delete.assert_awaited_once()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç–µ—Å—Ç—É)
    context.bot.send_message.assert_awaited_once()
    args, kwargs = context.bot.send_message.call_args
    assert kwargs['chat_id'] == 777
    assert "–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: 50 –º–æ–Ω–µ—Ç" in kwargs['text']
    assert isinstance(kwargs['reply_markup'], InlineKeyboardMarkup)

# --- –¢–µ—Å—Ç—ã –¥–ª—è casino_menu_without_balance ---

@pytest.mark.asyncio
async def test_casino_menu_without_balance_from_callback():
    """–¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –∏–∑ callback."""
    update = MagicMock(spec=Update)
    callback_query = MagicMock(spec=CallbackQuery)
    callback_query.from_user = MagicMock(spec=User)
    callback_query.from_user.id = 789
    callback_query.from_user.is_bot = False
    callback_query.message = MagicMock(spec=Message)
    callback_query.message.chat_id = 555
    callback_query.message.delete = AsyncMock()
    update.callback_query = callback_query
    update.message = None
    
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()
    
    await casino_menu_without_balance(update, context)
    
    callback_query.message.delete.assert_awaited_once()
    context.bot.send_message.assert_awaited_once()
    args, kwargs = context.bot.send_message.call_args
    assert kwargs['chat_id'] == 555
    assert "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞!" in kwargs['text']
    assert isinstance(kwargs['reply_markup'], InlineKeyboardMarkup)
    keyboard = kwargs['reply_markup'].inline_keyboard
    assert len(keyboard) == 2
    assert keyboard[1][0].text == "üè† –í –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ" # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    assert keyboard[1][0].callback_data == "casino:menu"

# --- –¢–µ—Å—Ç—ã –¥–ª—è casino_callback_handler ---

@pytest.mark.asyncio
@patch('casino.casino_main.handle_slots_callback')
async def test_casino_callback_handler_slots(mock_handle_slots):
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–æ—Ç–æ–≤."""
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.data = "casino:slots"
    update.callback_query = query
    context = MagicMock()
    
    await casino_callback_handler(update, context)
    
    mock_handle_slots.assert_awaited_once_with(query, context)
    query.answer.assert_not_called() # answer –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏

@pytest.mark.asyncio
@patch('casino.casino_main.handle_roulette_bet')
async def test_casino_callback_handler_roulette(mock_handle_roulette):
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É–ª–µ—Ç–∫–∏."""
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.data = "casino:roulette"
    update.callback_query = query
    context = MagicMock()
    
    await casino_callback_handler(update, context)
    
    mock_handle_roulette.assert_awaited_once_with(update, context)
    query.answer.assert_not_called()

@pytest.mark.asyncio
@patch('casino.casino_main.casino_command')
async def test_casino_callback_handler_menu(mock_casino_cmd):
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.data = "casino:menu"
    update.callback_query = query
    context = MagicMock()
    
    await casino_callback_handler(update, context)
    
    mock_casino_cmd.assert_awaited_once_with(update, context)
    query.answer.assert_not_called()

@pytest.mark.asyncio
async def test_casino_callback_handler_exit():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–∞–∑–∏–Ω–æ."""
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.data = "casino:exit"
    query.message = MagicMock(spec=Message)
    query.message.delete = AsyncMock()
    query.answer = AsyncMock()
    update.callback_query = query
    context = MagicMock()
    
    await casino_callback_handler(update, context)
    
    query.message.delete.assert_awaited_once()
    query.answer.assert_awaited_once_with("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–∞–∑–∏–Ω–æ. –î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã")

@pytest.mark.asyncio
@patch('casino.casino_main.handle_slots_bet_callback')
async def test_casino_callback_handler_slots_bet(mock_handle_slots_bet):
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞–≤–∫–∏ —Å–ª–æ—Ç–æ–≤."""
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.data = "slots_bet:10"
    update.callback_query = query
    context = MagicMock()

    await casino_callback_handler(update, context)

    mock_handle_slots_bet.assert_awaited_once_with(update, context)
    query.answer.assert_not_called()

@pytest.mark.asyncio
@patch('casino.casino_main.handle_roulette_bet_callback')
async def test_casino_callback_handler_roulette_bet(mock_handle_roulette_bet):
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞–≤–∫–∏ —Ä—É–ª–µ—Ç–∫–∏."""
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.data = "roulette_bet:red:5"
    update.callback_query = query
    context = MagicMock()
    context.user_data = {} # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_data

    await casino_callback_handler(update, context)

    assert context.user_data['bet_amount'] == 5 # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
    mock_handle_roulette_bet.assert_awaited_once_with(query, context, "red")
    query.answer.assert_not_called()

@pytest.mark.asyncio
async def test_casino_callback_handler_unknown():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ callback_data."""
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.data = "casino:unknown_action"
    query.answer = AsyncMock()
    update.callback_query = query
    context = MagicMock()
    
    await casino_callback_handler(update, context)
    
    query.answer.assert_awaited_once_with("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

@pytest.mark.asyncio
@patch('casino.casino_main.handle_slots_callback', side_effect=Exception("Test Error"))
@patch('casino.casino_main.logging')
async def test_casino_callback_handler_exception(mock_logging, mock_handle_slots):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.data = "casino:slots"
    query.answer = AsyncMock()
    update.callback_query = query
    context = MagicMock()

    await casino_callback_handler(update, context)

    mock_handle_slots.assert_awaited_once() # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã–ª –≤—ã–∑–≤–∞–Ω
    mock_logging.error.assert_called_once() # –û—à–∏–±–∫–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞
    query.answer.assert_awaited_once_with("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True) 