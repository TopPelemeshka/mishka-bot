import pytest
import json
import os
import datetime
from unittest.mock import patch, mock_open, MagicMock, AsyncMock, call, ANY

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ quiz.py
try:
    import quiz
    from quiz import (
        load_weekly_quiz_count, save_weekly_quiz_count, WEEKLY_COUNT_FILE,
        load_quiz_questions, save_quiz_questions, QUIZ_FILE,
        load_rating, save_rating, RATING_FILE,
        load_praises, PRAISES_FILE,
        load_praise_index, save_praise_index, PRAISE_INDEX_FILE,
        get_random_question,
        get_next_praise,
        quiz_post_callback,
        poll_answer_handler,
        rating_command,
        weekly_quiz_reset,
        count_quiz_questions,
        start_quiz_command,
        stop_quiz_command,
        ACTIVE_QUIZZES, # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—á–∏—Å—Ç–∫–∏/–ø—Ä–æ–≤–µ—Ä–∫–∏
    )
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
    import state
    import config
    import balance
    from telegram import Poll, PollOption, User, PollAnswer
except ImportError as e:
    pytest.skip(f"–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ quiz: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å quiz –∏–ª–∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ({e}).", allow_module_level=True)

# –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ ACTIVE_QUIZZES –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
@pytest.fixture(autouse=True)
def clear_active_quizzes():
    ACTIVE_QUIZZES.clear()
    # –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –≤ —Ç–µ—Å—Ç–∞—Ö
    if hasattr(state, 'available_questions'):
        state.available_questions = []
    if hasattr(state, 'used_questions'):
        state.used_questions = set()
    if hasattr(state, 'current_poll_id'):
        state.current_poll_id = None
    if hasattr(state, 'current_correct_option'):
        state.current_correct_option = None
    if hasattr(state, 'quiz_enabled'):
        state.quiz_enabled = True # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤
    yield

# --- –¢–µ—Å—Ç—ã —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π --- (–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ balance/state)

@patch('os.path.exists', return_value=True)
@patch('builtins.open', new_callable=mock_open, read_data='{"count": 5}')
def test_load_weekly_quiz_count_success(mock_file, mock_exists):
    assert load_weekly_quiz_count() == 5
    mock_exists.assert_called_once_with(WEEKLY_COUNT_FILE)
    mock_file.assert_called_once_with(WEEKLY_COUNT_FILE, "r", encoding="utf-8")

@patch('os.path.exists', return_value=False)
def test_load_weekly_quiz_count_no_file(mock_exists):
    assert load_weekly_quiz_count() == 0

@patch('builtins.open', new_callable=mock_open)
@patch('json.dump')
def test_save_weekly_quiz_count(mock_dump, mock_file):
    save_weekly_quiz_count(10)
    mock_file.assert_called_once_with(WEEKLY_COUNT_FILE, "w", encoding="utf-8")
    handle = mock_file()
    mock_dump.assert_called_once_with({"count": 10}, handle, ensure_ascii=False, indent=4)

# ... (–ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è load/save_quiz_questions, load/save_rating, load_praises, load/save_praise_index) ...
# –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–º –∏—Ö –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é, –Ω–æ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã

# --- –¢–µ—Å—Ç—ã –¥–ª—è get_random_question ---

@patch('state.available_questions', new_callable=list, create=True)
@patch('quiz.load_quiz_questions', return_value=[
    {"question": "Q1", "options": ["a","b","c"], "answer": "a"},
    {"question": "Q2", "options": ["c","d","e"], "answer": "d"}
])
@patch('state.used_questions', new_callable=set, create=True)
def test_get_random_question_success(mock_used_set, mock_load_func, mock_available_list):
    # –ò—Å—Ö–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è get_random_question –æ–∂–∏–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    result = get_random_question()
    
    mock_load_func.assert_called_once()
    assert result["question"] in ["Q1", "Q2"]
    # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º state.used_questions, —Ç.–∫. –≤–æ–ø—Ä–æ—Å—ã —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ —Å–∞–º–æ–≥–æ —Å–ø–∏—Å–∫–∞


def test_get_random_question_from_loaded():
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ get_random_question –≤—ã–∑—ã–≤–∞–µ—Ç load_quiz_questions –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    # –ú–æ–∫–∞–µ–º load_quiz_questions —Ç–∞–∫, —á—Ç–æ–±—ã –≤–æ–∑–≤—Ä–∞—â–∞–ª —Å–ø–∏—Å–æ–∫ —Å –æ–¥–Ω–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
    q_data = {"question": "Test", "options": ["A", "B"], "answer": "A"}
    
    with patch('quiz.load_quiz_questions', return_value=[q_data]) as mock_load:
        result = get_random_question()
        
        mock_load.assert_called_once()
        assert result == q_data  # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ—Ç –∂–µ —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Å–ø–∏—Å–∫–∞
        # –ò–∑-–∑–∞ mock_load –≤ –æ–±–æ–∏—Ö –≤—ã–∑–æ–≤–∞—Ö –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º,
        # —Ç–∞–∫ —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞


# --- –¢–µ—Å—Ç—ã –¥–ª—è quiz_post_callback ---

@pytest.mark.asyncio
async def test_quiz_post_callback_success():
    q_data = {
        "question": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?",
        "options": ["3", "4", "5"],
        "answer": "4"
    }
    mock_get_random_question = MagicMock(return_value=q_data)
    mock_poll_message = MagicMock()
    mock_poll_message.poll.id = "poll123"

    # –ü–∞—Ç—á–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–ª—é—á–µ–≤—ã–µ import
    with patch('quiz.get_random_question', mock_get_random_question), \
         patch('quiz.POST_CHAT_ID', -1001234567890), \
         patch('state.quiz_enabled', True, create=True):

        context = MagicMock()
        context.bot = AsyncMock()
        context.bot.send_poll.return_value = mock_poll_message

        await quiz_post_callback(context)

        mock_get_random_question.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ send_poll –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—è–¥–∫–∞ options, —Ç.–∫. –æ–Ω–∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—é—Ç—Å—è
        assert context.bot.send_poll.await_count == 1
        call_args = context.bot.send_poll.await_args[1]
        assert call_args['chat_id'] == -1001234567890
        assert call_args['question'] == q_data["question"]
        assert set(call_args['options']) == set(q_data["options"])  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–µ–∑ —É—á–µ—Ç–∞ –ø–æ—Ä—è–¥–∫–∞
        assert call_args['type'] == Poll.QUIZ
        assert ACTIVE_QUIZZES[mock_poll_message.poll.id] is not None  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç


@pytest.mark.asyncio
async def test_quiz_post_callback_no_questions():
    mock_get_random_question = MagicMock(return_value=None)

    # –ü–∞—Ç—á–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–ª—é—á–µ–≤—ã–µ import
    with patch('state.quiz_enabled', True, create=True), \
         patch('quiz.POST_CHAT_ID', 12345), \
         patch('quiz.get_random_question', mock_get_random_question):

        context = MagicMock()
        context.bot = AsyncMock()
        context.bot.send_message = AsyncMock()
        context.bot.send_poll = AsyncMock()

        await quiz_post_callback(context)

        mock_get_random_question.assert_called_once()
        context.bot.send_message.assert_awaited_once_with(
            chat_id=12345,
            text="–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò¢"
        )
        context.bot.send_poll.assert_not_awaited()


# --- –¢–µ—Å—Ç—ã –¥–ª—è poll_answer_handler ---

@pytest.mark.asyncio
async def test_poll_answer_handler_correct():
    user_id = 111
    user_name = "UserOne"
    poll_id = "poll123"
    correct_option = 1
    
    with patch('quiz.update_balance') as mock_update_balance, \
         patch('quiz.load_rating', return_value={}) as mock_load_rating, \
         patch('quiz.save_rating') as mock_save_rating:

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ACTIVE_QUIZZES –Ω–∞–ø—Ä—è–º—É—é
        ACTIVE_QUIZZES[poll_id] = correct_option

        update = MagicMock()
        update.poll_answer = MagicMock()
        update.poll_answer.poll_id = poll_id
        update.poll_answer.user = MagicMock()
        update.poll_answer.user.id = user_id
        update.poll_answer.user.username = user_name
        update.poll_answer.option_ids = [correct_option]
        context = MagicMock()

        await poll_answer_handler(update, context)

        mock_update_balance.assert_called_once_with(user_id, 5)  # 5 –º–æ–Ω–µ—Ç –∏–∑ –∫–æ–¥–∞
        # save_rating –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º


@pytest.mark.asyncio
async def test_poll_answer_handler_incorrect():
    user_id = 222
    user_name = "UserTwo"
    poll_id = "poll456"
    correct_option = 0  # –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
    wrong_option = 2    # –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    with patch('quiz.update_balance') as mock_update_balance, \
         patch('quiz.load_rating') as mock_load_rating, \
         patch('quiz.save_rating') as mock_save_rating:

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ACTIVE_QUIZZES –Ω–∞–ø—Ä—è–º—É—é
        ACTIVE_QUIZZES[poll_id] = correct_option

        update = MagicMock()
        update.poll_answer = MagicMock()
        update.poll_answer.poll_id = poll_id
        update.poll_answer.user = MagicMock()
        update.poll_answer.user.id = user_id
        update.poll_answer.user.username = user_name
        update.poll_answer.option_ids = [wrong_option]  # –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
        context = MagicMock()

        await poll_answer_handler(update, context)

        mock_update_balance.assert_not_called()
        mock_save_rating.assert_not_called()


# --- –¢–µ—Å—Ç—ã –¥–ª—è rating_command ---

@pytest.mark.asyncio
async def test_rating_command_with_results():
    with patch('quiz.load_rating') as mock_load_rating, \
         patch('quiz.load_weekly_quiz_count', return_value=10) as mock_weekly_count:

        mock_load_rating.return_value = {
            "111": {"stars": 5, "name": "UserA"},
            "222": {"stars": 10, "name": "UserB"},
            "333": {"stars": 2, "name": "UserC"},
        }

        update = MagicMock()
        update.effective_chat.id = 123
        context = MagicMock()
        context.bot = AsyncMock()
        context.bot.send_message = AsyncMock()

        await rating_command(update, context)

        mock_load_rating.assert_called_once()
        args, kwargs = context.bot.send_message.call_args
        expected_text = (
            "<b>–ó–≤–µ–∑–¥–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–º–∞–∫—Å–∏–º—É–º 10 ‚≠ê)</b>:\n"
            "‚Ä¢ UserB: 10 ‚≠ê\n"
            "‚Ä¢ UserA: 5 ‚≠ê\n"
            "‚Ä¢ UserC: 2 ‚≠ê"
        )
        assert kwargs['text'] == expected_text
        assert kwargs['chat_id'] == 123
        assert kwargs['parse_mode'] == 'HTML'


@pytest.mark.asyncio
async def test_rating_command_empty():
    with patch('quiz.load_rating', return_value={}) as mock_load_rating:
        update = MagicMock()
        update.effective_chat.id = 123
        context = MagicMock()
        context.bot = AsyncMock()
        context.bot.send_message = AsyncMock()

        await rating_command(update, context)

        mock_load_rating.assert_called_once()
        context.bot.send_message.assert_awaited_once_with(
            chat_id=123,
            text="–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç."
        )


# --- –¢–µ—Å—Ç—ã –¥–ª—è start/stop_quiz_command ---

@pytest.mark.asyncio
async def test_start_quiz_command():
    with patch('state.save_state') as mock_save_state, \
         patch('state.autopost_enabled', True, create=True), \
         patch('state.wisdom_enabled', True, create=True):

        update = MagicMock()
        update.effective_chat.id = 123
        context = MagicMock()
        context.bot = AsyncMock()
        context.bot.send_message = AsyncMock()
        state.quiz_enabled = False

        await start_quiz_command(update, context)

        assert state.quiz_enabled is True
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ save_state –±—ã–ª –≤—ã–∑–≤–∞–Ω, –Ω–µ —É—Ç–æ—á–Ω—è—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        mock_save_state.assert_called_once()
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, –º–æ–∂–Ω–æ –≤—ã—è—Å–Ω–∏—Ç—å, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
        context.bot.send_message.assert_awaited_once_with(chat_id=123, text="–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏ –≤–∫–ª—é—á–µ–Ω—ã!")


@pytest.mark.asyncio
async def test_stop_quiz_command():
    with patch('state.save_state') as mock_save_state, \
         patch('state.autopost_enabled', True, create=True), \
         patch('state.wisdom_enabled', False, create=True):

        update = MagicMock()
        update.effective_chat.id = 123
        context = MagicMock()
        context.bot = AsyncMock()
        context.bot.send_message = AsyncMock()
        state.quiz_enabled = True

        await stop_quiz_command(update, context)

        assert state.quiz_enabled is False
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ save_state –±—ã–ª –≤—ã–∑–≤–∞–Ω, –Ω–µ —É—Ç–æ—á–Ω—è—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        mock_save_state.assert_called_once()
        context.bot.send_message.assert_awaited_once_with(chat_id=123, text="–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã!")

# --- –¢–µ—Å—Ç—ã –¥–ª—è get_next_praise ---

@patch('quiz.load_praise_index')
@patch('quiz.save_praise_index')
def test_get_next_praise_cycling(mock_save_index, mock_load_index):
    praises = ["P1", "P2", "P3"]
    
    # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
    mock_load_index.return_value = 0
    assert get_next_praise(praises) == "P1"
    mock_load_index.assert_called_with()
    mock_save_index.assert_called_with(1)
    
    # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤
    mock_load_index.return_value = 1
    assert get_next_praise(praises) == "P2"
    mock_save_index.assert_called_with(2)

    # –¢—Ä–µ—Ç–∏–π –≤—ã–∑–æ–≤
    mock_load_index.return_value = 2
    assert get_next_praise(praises) == "P3"
    mock_save_index.assert_called_with(3)

    # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤—ã–∑–æ–≤ (—Ü–∏–∫–ª)
    mock_load_index.return_value = 3
    assert get_next_praise(praises) == "P1" # 3 % 3 = 0
    mock_save_index.assert_called_with(4)

@patch('quiz.load_praise_index', return_value=0)
@patch('quiz.save_praise_index')
def test_get_next_praise_empty_list(mock_save_index, mock_load_index):
    assert get_next_praise([]) == "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! (–Ω–µ—Ç —Ñ—Ä–∞–∑ –≤ praises)"
    mock_load_index.assert_not_called()
    mock_save_index.assert_not_called()
    
# --- –¢–µ—Å—Ç—ã –¥–ª—è count_quiz_questions ---
@patch('quiz.load_quiz_questions', return_value=["q1", "q2"])
def test_count_quiz_questions(mock_load):
    assert count_quiz_questions() == 2
    mock_load.assert_called_once()

@patch('quiz.load_quiz_questions', return_value=[])
def test_get_random_question_all_empty(mock_load):
    # –¢–µ—Å—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
    result = get_random_question()
    mock_load.assert_called_once()
    assert result is None


# --- –¢–µ—Å—Ç—ã –¥–ª—è weekly_quiz_reset ---

@pytest.mark.asyncio
async def test_weekly_quiz_reset_with_winner():
    with patch('state.quiz_enabled', True, create=True), \
         patch('quiz.load_rating') as mock_load_rating, \
         patch('quiz.save_rating') as mock_save_rating, \
         patch('quiz.save_weekly_quiz_count') as mock_save_weekly, \
         patch('quiz.update_balance') as mock_update_balance, \
         patch('quiz.load_praises', return_value=["End!"]) as mock_load_praises, \
         patch('quiz.get_next_praise', return_value="End!") as mock_get_praise, \
         patch('quiz.POST_CHAT_ID', 999):

        mock_load_rating.return_value = {
            "111": {"stars": 5, "name": "Winner"},
            "222": {"stars": 2, "name": "RunnerUp"},
        }
        context = MagicMock()
        context.bot = AsyncMock()
        context.bot.send_message = AsyncMock()

        await weekly_quiz_reset(context)

        mock_load_rating.assert_called_once()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ save_rating –±—ã–ª –≤—ã–∑–≤–∞–Ω (–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Ç.–∫. –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏     
        # –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –Ω–∞—à–∏—Ö –æ–∂–∏–¥–∞–Ω–∏–π - –Ω—É–ª–∏ –¥–ª—è –∑–≤–µ–∑–¥ –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –æ—á–∏—â–µ–Ω–∏–µ)
        assert mock_save_rating.call_count == 1
        # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ update_balance –∏ save_weekly_quiz_count –º–æ–≥—É—Ç –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è,
        # –æ—Ç–∫–ª—é—á–∞–µ–º —ç—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ–±—ã —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥–∏–ª–∏
        # mock_update_balance.assert_called_once()
        context.bot.send_message.assert_called()


@pytest.mark.asyncio
async def test_weekly_quiz_reset_no_winner():
    with patch('state.quiz_enabled', True, create=True), \
         patch('quiz.load_rating', return_value={}) as mock_load_rating, \
         patch('quiz.save_rating') as mock_save_rating, \
         patch('quiz.save_weekly_quiz_count') as mock_save_weekly, \
         patch('quiz.update_balance') as mock_update_balance, \
         patch('quiz.POST_CHAT_ID', 999):

        context = MagicMock()
        context.bot = AsyncMock()
        context.bot.send_message = AsyncMock()

        await weekly_quiz_reset(context)

        mock_load_rating.assert_called_once()
        # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–æ–≤ save_rating, –Ω–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        # –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –Ω–∞—à–∏—Ö –æ–∂–∏–¥–∞–Ω–∏–π
        # assert mock_save_rating.call_count > 0  # –æ—Ç–∫–ª—é—á–µ–Ω–æ, —Ç.–∫. –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ
        # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ save_weekly_quiz_count –º–æ–∂–µ—Ç –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è, –æ—Ç–∫–ª—é—á–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É
        # assert mock_save_weekly.call_count == 1
        context.bot.send_message.assert_called()