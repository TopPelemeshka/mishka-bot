import pytest
import time
import asyncio
from unittest.mock import patch, MagicMock, AsyncMock, ANY, mock_open, call

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
try:
    from handlers.roll import roll_command, roll_callback
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
    import utils
    import config
    import state
    from telegram import Update, InlineKeyboardMarkup, User, Message, CallbackQuery, InputMediaPhoto, InputMediaAnimation
except ImportError as e:
    pytest.skip(f"–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ roll: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å handlers.roll –∏–ª–∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ({e}).", allow_module_level=True)

# --- –¢–µ—Å—Ç—ã –¥–ª—è roll_command ---

@pytest.mark.asyncio
@patch('handlers.roll.check_chat_and_execute')
async def test_roll_command_wrapper_called(mock_check_chat):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±–µ—Ä—Ç–∫—É check_chat_and_execute."""
    mock_check_chat.return_value = None
    update = MagicMock()
    context = MagicMock()
    await roll_command(update, context)
    mock_check_chat.assert_awaited_once_with(update, context, ANY)
    
    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–µ—Å—Ç—ã —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    # –ú—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–∞—Ö
    inner_func = mock_check_chat.call_args[0][2]
    return inner_func  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–∞—Ö

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ roll_command
async def get_inner_roll_command():
    with patch('handlers.roll.check_chat_and_execute') as mock_check:
        mock_check.return_value = None
        update = MagicMock()
        context = MagicMock()
        await roll_command(update, context)
        return mock_check.call_args[0][2]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ª–æ–≥–∏–∫—É _roll_command
@pytest.mark.asyncio
@patch('time.time')
@patch('asyncio.sleep', return_value=None)
@patch('random.randint', return_value=4) # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
@patch('builtins.open', new_callable=mock_open, read_data=b'imagedata')
@patch('handlers.roll.DICE_GIF_ID', 'test_gif_id') # –ú–æ–∫ ID –≥–∏—Ñ–∫–∏
@patch('handlers.roll.COOLDOWN', 5) # –ú–æ–∫ –∫—É–ª–¥–∞—É–Ω–∞
@patch('handlers.roll.last_roll_time', {}) # –ß–∏—Å—Ç–∏–º —Å–ª–æ–≤–∞—Ä—å –∫—É–ª–¥–∞—É–Ω–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
async def test_roll_command_logic_default(mock_open_file, mock_randint, mock_sleep, mock_time):
    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é
    inner_func = await get_inner_roll_command()
    
    # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –µ—ë –Ω–∞–ø—Ä—è–º—É—é
    update = MagicMock(spec=Update)
    message = MagicMock(spec=Message)
    user = MagicMock(spec=User)
    user.id = 123
    update.effective_user = user
    update.effective_chat.id = 987
    context = MagicMock()
    context.args = [] # –ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∫—É–±–∏–∫ d6
    context.bot = AsyncMock()
    # –ú–æ–∫ –¥–ª—è send_animation –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID
    mock_sent_message = MagicMock(spec=Message)
    mock_sent_message.chat_id = 987
    mock_sent_message.message_id = 555
    context.bot.send_animation.return_value = mock_sent_message
    context.bot.edit_message_media = AsyncMock()
    
    mock_time.return_value = 100.0 # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    
    # –í—ã–∑—ã–≤–∞–µ–º –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—É—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é
    await inner_func(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ (–ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤)
    from handlers.roll import last_roll_time
    assert last_roll_time[123] == 100.0
    context.bot.send_message.assert_not_called() # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∫—É–ª–¥–∞—É–Ω–∞ –Ω–µ—Ç
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    context.bot.send_animation.assert_awaited_once_with(
        chat_id=987, 
        animation='test_gif_id', 
        caption="–ö—É–±–∏–∫ –∫–∞—Ç–∏—Ç—Å—è... üé≤"
    )
    mock_sleep.assert_awaited_once_with(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (d6)
    mock_randint.assert_called_once_with(1, 6)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    mock_open_file.assert_called_once_with("pictures/dice_result.png", "rb")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    context.bot.edit_message_media.assert_awaited_once()
    call_args = context.bot.edit_message_media.call_args
    assert call_args.kwargs['chat_id'] == 987
    assert call_args.kwargs['message_id'] == 555
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ (InputMediaPhoto)
    media_arg = call_args.kwargs['media']
    assert isinstance(media_arg, InputMediaPhoto)
    assert "üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: 4 (–∏–∑ 6)" in media_arg.caption
    assert "üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–±—Ä–æ—Å–æ–≤: 0" in media_arg.caption
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    reply_markup_arg = call_args.kwargs['reply_markup']
    assert isinstance(reply_markup_arg, InlineKeyboardMarkup)
    button = reply_markup_arg.inline_keyboard[0][0]
    assert button.text == "–ü–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å (0)"
    assert button.callback_data == "roll|6|0"

@pytest.mark.asyncio
@patch('time.time')
@patch('handlers.roll.COOLDOWN', 5)
@patch('handlers.roll.last_roll_time', {123: 98.0}) # –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—Ä–æ—Å–æ–∫ 2 —Å–µ–∫ –Ω–∞–∑–∞–¥
async def test_roll_command_logic_cooldown(mock_time):
    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é
    inner_func = await get_inner_roll_command()
    
    update = MagicMock(spec=Update)
    user = MagicMock(spec=User)
    user.id = 123
    update.effective_user = user
    update.effective_chat.id = 987
    context = MagicMock()
    context.args = []
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()
    
    mock_time.return_value = 100.0 # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (100 - 98 = 2 —Å–µ–∫ < 5 —Å–µ–∫)
    
    await inner_func(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫—É–ª–¥–∞—É–Ω–µ
    context.bot.send_message.assert_awaited_once()
    args = context.bot.send_message.call_args
    assert args.kwargs['chat_id'] == 987
    assert "–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–π –±—Ä–æ—Å–æ–∫!" in args.kwargs['text']
    assert "–ü–æ–¥–æ–∂–¥–∏—Ç–µ 3.0 —Å–µ–∫—É–Ω–¥." in args.kwargs['text']
    context.bot.send_animation.assert_not_called() # –ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è
    context.bot.edit_message_media.assert_not_called()

@pytest.mark.asyncio
@patch('time.time', return_value=100.0)
@patch('asyncio.sleep', return_value=None)
@patch('random.randint', return_value=15)
@patch('builtins.open', new_callable=mock_open, read_data=b'imagedata')
@patch('handlers.roll.DICE_GIF_ID', 'test_gif_id')
@patch('handlers.roll.COOLDOWN', 5)
@patch('handlers.roll.last_roll_time', {}) 
async def test_roll_command_logic_with_arg(mock_open_file, mock_randint, mock_sleep, mock_time):
    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é
    inner_func = await get_inner_roll_command()
    
    update = MagicMock(spec=Update)
    message = MagicMock(spec=Message)
    user = MagicMock(spec=User)
    user.id = 123
    update.effective_user = user
    update.effective_chat.id = 987
    context = MagicMock()
    context.args = ["20"] # –ë—Ä–æ—Å–æ–∫ d20
    context.bot = AsyncMock()
    mock_sent_message = MagicMock(spec=Message)
    mock_sent_message.chat_id = 987
    mock_sent_message.message_id = 555
    context.bot.send_animation.return_value = mock_sent_message
    context.bot.edit_message_media = AsyncMock()
    
    await inner_func(update, context)
    
    mock_randint.assert_called_once_with(1, 20) # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ d20
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    call_args = context.bot.edit_message_media.call_args
    media_arg = call_args.kwargs['media']
    assert "üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: 15 (–∏–∑ 20)" in media_arg.caption
    reply_markup_arg = call_args.kwargs['reply_markup']
    button = reply_markup_arg.inline_keyboard[0][0]
    assert button.callback_data == "roll|20|0" # –ü—Ä–æ–≤–µ—Ä–∫–∞ max_number –≤ callback_data

@pytest.mark.asyncio
@patch('time.time', return_value=100.0)
@patch('handlers.roll.last_roll_time', {}) 
async def test_roll_command_logic_invalid_arg(mock_time):
    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é
    inner_func = await get_inner_roll_command()
    
    update = MagicMock(spec=Update)
    user = MagicMock(spec=User)
    user.id = 123
    update.effective_user = user
    update.effective_chat.id = 987
    context = MagicMock()
    context.args = ["abc"]
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()

    await inner_func(update, context)
    
    context.bot.send_message.assert_awaited_once_with(chat_id=987, text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: /roll 20")
    context.bot.send_animation.assert_not_called()

# --- –¢–µ—Å—Ç—ã –¥–ª—è roll_callback ---

@pytest.mark.asyncio
@patch('time.time', return_value=200.0)
@patch('asyncio.sleep', return_value=None)
@patch('random.randint', return_value=18) # –ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
@patch('builtins.open', new_callable=mock_open, read_data=b'imagedata')
@patch('handlers.roll.DICE_GIF_ID', 'test_gif_id') 
@patch('handlers.roll.COOLDOWN', 5) 
@patch('handlers.roll.last_roll_time', {}) 
async def test_roll_callback_logic(mock_open_file, mock_randint, mock_sleep, mock_time):
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.answer = AsyncMock()
    user = MagicMock(spec=User)
    user.id = 456
    query.from_user = user
    query.data = "roll|10|2" # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º d10, 3-–π –±—Ä–æ—Å–æ–∫ (–∏–Ω–¥–µ–∫—Å 2)
    query.edit_message_media = AsyncMock()
    update.callback_query = query
    context = MagicMock()
    
    await roll_callback(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback
    query.answer.assert_awaited_once()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    from handlers.roll import last_roll_time
    assert last_roll_time[456] == 200.0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é
    query.edit_message_media.assert_awaited()
    media_animation_call = query.edit_message_media.call_args_list[0]
    assert isinstance(media_animation_call.kwargs['media'], InputMediaAnimation)
    assert media_animation_call.kwargs['media'].media == 'test_gif_id'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    mock_sleep.assert_awaited_once_with(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–Ω–¥–æ–º
    mock_randint.assert_called_once_with(1, 10)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    media_photo_call = query.edit_message_media.call_args_list[1]
    assert isinstance(media_photo_call.kwargs['media'], InputMediaPhoto)
    assert "üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: 18 (–∏–∑ 10)" in media_photo_call.kwargs['media'].caption
    assert "üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–±—Ä–æ—Å–æ–≤: 3" in media_photo_call.kwargs['media'].caption
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏
    keyboard = media_photo_call.kwargs['reply_markup']
    button = keyboard.inline_keyboard[0][0]
    assert button.text == "–ü–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å (3)"
    assert button.callback_data == "roll|10|3"

@pytest.mark.asyncio
@patch('time.time', return_value=200.0)
@patch('handlers.roll.COOLDOWN', 5)
@patch('handlers.roll.last_roll_time', {456: 198.0}) # –ü–µ—Ä–µ–±—Ä–æ—Å 2 —Å–µ–∫ –Ω–∞–∑–∞–¥
async def test_roll_callback_logic_cooldown(mock_time):
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.answer = AsyncMock()
    user = MagicMock(spec=User)
    user.id = 456
    query.from_user = user
    query.data = "roll|10|2" 
    update.callback_query = query
    context = MagicMock()
    
    await roll_callback(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫—É–ª–¥–∞—É–Ω–µ
    query.answer.assert_awaited_with(
        text="–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3.0 —Å–µ–∫—É–Ω–¥.",
        show_alert=True
    )
    query.edit_message_media.assert_not_called() 