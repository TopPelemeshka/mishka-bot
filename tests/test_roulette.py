import pytest
import asyncio
import json
import random
from unittest.mock import patch, mock_open, MagicMock, AsyncMock, call, ANY

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–æ–¥—É–ª—å –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏
try:
    import casino.roulette as casino_roulette
    from casino.roulette import (
        load_file_ids,
        safe_delete_message,
        handle_roulette_bet_callback,
        handle_roulette_bet,
        handle_change_bet
    )
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
    import balance
    import casino.roulette_utils as roulette_utils
    from telegram import Update, InlineKeyboardMarkup, User, CallbackQuery, Message, Chat
    from telegram.error import TimedOut
except ImportError as e:
    pytest.skip(f"–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ roulette: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å casino.roulette –∏–ª–∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ({e}).", allow_module_level=True)

# --- –¢–µ—Å—Ç—ã –¥–ª—è load_file_ids ---

@patch('builtins.open', new_callable=mock_open, read_data='{"animations": {"roulette": {"red": ["id1"], "black": ["id2"], "zero": ["id3"]}}}')
@patch('os.path.join', return_value='config/file_ids.json') # –ú–æ–∫ –ø—É—Ç–∏
def test_load_file_ids_success(mock_join, mock_file):
    ids = load_file_ids()
    assert ids == {'animations': {'roulette': {'red': ['id1'], 'black': ['id2'], 'zero': ['id3']}}}
    mock_join.assert_called_once_with('config', 'file_ids.json')
    mock_file.assert_called_once_with('config/file_ids.json', 'r', encoding='utf-8')

@patch('builtins.open', side_effect=FileNotFoundError)
@patch('os.path.join', return_value='config/file_ids.json')
def test_load_file_ids_not_found(mock_join, mock_file):
    with pytest.raises(FileNotFoundError):
        load_file_ids()

@patch('builtins.open', new_callable=mock_open, read_data='invalid json')
@patch('os.path.join', return_value='config/file_ids.json')
def test_load_file_ids_invalid_json(mock_join, mock_file):
    with pytest.raises(json.JSONDecodeError):
        load_file_ids()

# --- –¢–µ—Å—Ç—ã –¥–ª—è safe_delete_message ---

@pytest.mark.asyncio
async def test_safe_delete_message_success_first_try():
    message = MagicMock()
    message.delete = AsyncMock()
    await safe_delete_message(message)
    message.delete.assert_awaited_once()

@pytest.mark.asyncio
@patch('asyncio.sleep', return_value=None) # –ú–æ–∫–∞–µ–º sleep
async def test_safe_delete_message_success_second_try(mock_sleep):
    message = MagicMock()
    # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ, —É—Å–ø–µ—Ö –ø—Ä–∏ –≤—Ç–æ—Ä–æ–π
    message.delete = AsyncMock(side_effect=[TimedOut(), None])
    
    await safe_delete_message(message, retries=3, delay=0.1)
    
    assert message.delete.await_count == 2
    mock_sleep.assert_awaited_once_with(0.1)

@pytest.mark.asyncio
@patch('asyncio.sleep', return_value=None)
@patch('builtins.print') # –ú–æ–∫–∞–µ–º print, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –≤—ã–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤
async def test_safe_delete_message_failure_all_retries(mock_print, mock_sleep):
    message = MagicMock()
    # –í—Å–µ–≥–¥–∞ –æ—à–∏–±–∫–∞
    message.delete = AsyncMock(side_effect=TimedOut())
    retries = 2
    
    await safe_delete_message(message, retries=retries, delay=0.1)
    
    assert message.delete.await_count == retries
    assert mock_sleep.await_count == retries
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–æ–Ω—Ü–µ
    mock_print.assert_any_call("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")

# --- –¢–µ—Å—Ç—ã –¥–ª—è handle_roulette_bet --- (–ú–µ–Ω—é —Å—Ç–∞–≤–æ–∫)

@pytest.mark.asyncio
@patch('casino.roulette.get_balance', return_value=100)
async def test_handle_roulette_bet_display(mock_get_balance):
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.message = MagicMock(spec=Message)
    query.message.edit_text = AsyncMock()
    query.answer = AsyncMock()
    update.callback_query = query
    user = MagicMock(spec=User)
    user.id = 111
    update.effective_user = user
    
    context = MagicMock()
    context.user_data = {'bet_amount': 10} # –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞
    
    await handle_roulette_bet(update, context)
    
    mock_get_balance.assert_called_once_with(111)
    query.answer.assert_awaited_once()
    query.message.edit_text.assert_awaited_once()
    
    args, kwargs = query.message.edit_text.call_args
    assert "üé∞ **–†—É–ª–µ—Ç–∫–∞**" in args[0]
    assert "üí∞ **–°—Ç–∞–≤–∫–∞**: 10 –º–æ–Ω–µ—Ç" in args[0]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (100 * (10 / 50) = 20, 1800 * (10/50) = 360)
    assert "- **–ß—ë—Ä–Ω–æ–µ / –ö—Ä–∞—Å–Ω–æ–µ**: 20 –º–æ–Ω–µ—Ç" in args[0]
    assert "- **–ó–µ—Ä–æ**: 360 –º–æ–Ω–µ—Ç" in args[0]
    assert kwargs['parse_mode'] == 'Markdown'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    assert isinstance(kwargs['reply_markup'], InlineKeyboardMarkup)
    keyboard = kwargs['reply_markup'].inline_keyboard
    assert len(keyboard) == 3
    assert keyboard[0][0].text == "‚ö´ –ß—ë—Ä–Ω–æ–µ"
    assert keyboard[0][0].callback_data == "roulette_bet:black:10"
    assert keyboard[0][1].text == "üî¥ –ö—Ä–∞—Å–Ω–æ–µ"
    assert keyboard[0][1].callback_data == "roulette_bet:red:10"
    assert keyboard[0][2].text == "üü¢ –ó–µ—Ä–æ"
    assert keyboard[0][2].callback_data == "roulette_bet:zero:10"
    assert keyboard[1][0].text == "üí∞ –°—Ç–∞–≤–∫–∞ +5"
    assert keyboard[1][0].callback_data == "change_bet:+5"
    assert keyboard[1][1].text == "üí∞ –°—Ç–∞–≤–∫–∞ -5"
    assert keyboard[1][1].callback_data == "change_bet:-5"
    assert keyboard[2][0].text == "üè† –í –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ"
    assert keyboard[2][0].callback_data == "casino:menu"

# --- –¢–µ—Å—Ç—ã –¥–ª—è handle_change_bet ---

@pytest.mark.asyncio
@patch('casino.roulette.get_balance', return_value=100)
@patch('casino.roulette.handle_roulette_bet') # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
async def test_handle_change_bet_increase(mock_handle_bet_display, mock_get_balance):
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.data = "change_bet:+5"
    update.callback_query = query
    user = MagicMock(spec=User)
    user.id = 222
    update.effective_user = user
    
    context = MagicMock()
    context.user_data = {'bet_amount': 10}
    
    await handle_change_bet(update, context)
    
    mock_get_balance.assert_called_once_with(222)
    assert context.user_data['bet_amount'] == 15 # –°—Ç–∞–≤–∫–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
    mock_handle_bet_display.assert_awaited_once_with(update, context)

@pytest.mark.asyncio
@patch('casino.roulette.get_balance', return_value=100)
@patch('casino.roulette.handle_roulette_bet')
async def test_handle_change_bet_decrease(mock_handle_bet_display, mock_get_balance):
    # ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –Ω–æ —Å "change_bet:-5") ...
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.data = "change_bet:-5"
    update.callback_query = query
    user = MagicMock(spec=User)
    user.id = 222
    update.effective_user = user
    context = MagicMock()
    context.user_data = {'bet_amount': 10}
    
    await handle_change_bet(update, context)
    
    assert context.user_data['bet_amount'] == 5 # –°—Ç–∞–≤–∫–∞ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –¥–æ –º–∏–Ω–∏–º—É–º–∞
    mock_handle_bet_display.assert_awaited_once_with(update, context)

@pytest.mark.asyncio
@patch('casino.roulette.get_balance', return_value=100)
@patch('casino.roulette.handle_roulette_bet')
async def test_handle_change_bet_min_limit(mock_handle_bet_display, mock_get_balance):
    # ... (—É–º–µ–Ω—å—à–∞–µ–º —Å—Ç–∞–≤–∫—É, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞) ...
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.data = "change_bet:-5"
    update.callback_query = query
    user = MagicMock(spec=User)
    user.id = 222
    update.effective_user = user
    context = MagicMock()
    context.user_data = {'bet_amount': 5} # –£–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞

    await handle_change_bet(update, context)
    
    assert context.user_data['bet_amount'] == 5 # –°—Ç–∞–≤–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    mock_handle_bet_display.assert_awaited_once_with(update, context)

@pytest.mark.asyncio
@patch('casino.roulette.get_balance', return_value=20) # –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å
@patch('casino.roulette.handle_roulette_bet')
async def test_handle_change_bet_max_limit(mock_handle_bet_display, mock_get_balance):
    # ... (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É, –∫–æ–≥–¥–∞ –æ–Ω–∞ –ø–æ—á—Ç–∏ —Ä–∞–≤–Ω–∞ –±–∞–ª–∞–Ω—Å—É) ...
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.data = "change_bet:+5"
    update.callback_query = query
    user = MagicMock(spec=User)
    user.id = 222
    update.effective_user = user
    context = MagicMock()
    context.user_data = {'bet_amount': 18} # –ë–ª–∏–∑–∫–æ –∫ –±–∞–ª–∞–Ω—Å—É

    await handle_change_bet(update, context)
    
    assert context.user_data['bet_amount'] == 20 # –°—Ç–∞–≤–∫–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –¥–æ –±–∞–ª–∞–Ω—Å–∞
    mock_handle_bet_display.assert_awaited_once_with(update, context)

# --- –¢–µ—Å—Ç—ã –¥–ª—è handle_roulette_bet_callback --- (–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)

@pytest.mark.asyncio
@patch('casino.roulette.get_balance')
@patch('casino.roulette.update_balance')
@patch('casino.roulette.get_roulette_result', return_value='red') # –†–µ–∑—É–ª—å—Ç–∞—Ç - –∫—Ä–∞—Å–Ω–æ–µ
@patch('casino.roulette.load_file_ids', return_value={'animations': {'roulette': {'red': ['gif_red']}}})
@patch('random.choice', return_value='gif_red')
@patch('casino.roulette.safe_delete_message', return_value=None)
@patch('asyncio.sleep', return_value=None)
async def test_handle_roulette_bet_callback_win_red(
    mock_sleep, mock_safe_delete, mock_random_choice, mock_load_ids, 
    mock_get_result, mock_update_balance, mock_get_balance
):
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.answer = AsyncMock()
    query.from_user = MagicMock(spec=User)
    query.from_user.id = 333
    query.message = MagicMock(spec=Message)
    query.message.chat = MagicMock(spec=Chat)
    query.message.chat.send_animation = AsyncMock(return_value=MagicMock()) # –ú–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–∏—Ñ–∫–∏
    query.message.edit_text = AsyncMock()
    bet = 50
    query.data = f"roulette_bet:red:{bet}" # –°—Ç–∞–≤–∫–∞ –Ω–∞ –∫—Ä–∞—Å–Ω–æ–µ
    update.callback_query = query
    context = MagicMock()
    
    mock_get_balance.side_effect = [1000, 1000 - bet + (100 * (bet / 50))] # –ë–∞–ª–∞–Ω—Å –¥–æ, –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ
    
    await handle_roulette_bet_callback(query, context, 'red')
    
    mock_get_balance.assert_called()
    mock_get_result.assert_called_once()
    mock_load_ids.assert_called_once()
    mock_random_choice.assert_called_once_with(['gif_red']) # –í—ã–±–æ—Ä –≥–∏—Ñ–∫–∏
    query.message.chat.send_animation.assert_awaited_once_with('gif_red')
    mock_sleep.assert_awaited_once_with(5.5)
    mock_safe_delete.assert_awaited_once() # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–∏—Ñ–∫–∏
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (—Å–ø–∏—Å–∞–Ω–∏–µ + –≤—ã–∏–≥—Ä—ã—à)
    expected_winnings = int(100 * (bet / 50))
    mock_update_balance.assert_has_calls([call(333, -bet), call(333, expected_winnings)])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    query.message.edit_text.assert_awaited_once()
    args, kwargs = query.message.edit_text.call_args
    assert f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {expected_winnings} –º–æ–Ω–µ—Ç!" in args[0]
    assert f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å*: {1000 - bet + expected_winnings}" in args[0]
    assert isinstance(kwargs['reply_markup'], InlineKeyboardMarkup)
    assert kwargs['parse_mode'] == 'Markdown'
    # ... (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫) ...
    query.answer.assert_awaited_once()

# ... (–ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–∞ zero, –ø—Ä–æ–∏–≥—Ä—ã—à–∞, –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –±–∞–ª–∞–Ω—Å–∞) ...

@pytest.mark.asyncio
@patch('casino.roulette.get_balance', return_value=10) # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
async def test_handle_roulette_bet_callback_insufficient_funds(mock_get_balance):
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.answer = AsyncMock()
    query.from_user = MagicMock(spec=User)
    query.from_user.id = 444
    bet = 50
    query.data = f"roulette_bet:black:{bet}"
    update.callback_query = query
    context = MagicMock()

    await handle_roulette_bet_callback(query, context, 'black')
    
    mock_get_balance.assert_called_once_with(444)
    query.answer.assert_awaited_once_with("üí∏ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.", show_alert=True)
    # –î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–∏—Ñ–∫–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) –Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
    query.message.chat.send_animation.assert_not_called() 
    query.message.edit_text.assert_not_called() 