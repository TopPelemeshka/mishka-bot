import pytest
from unittest.mock import patch, MagicMock, AsyncMock, call

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–æ–¥—É–ª—å –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏
try:
    import casino.slots as casino_slots
    from casino.slots import handle_slots_callback, handle_slots_bet_callback, SLOT_SYMBOLS
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
    import balance
    from telegram import Update, InlineKeyboardMarkup, User, CallbackQuery
except ImportError as e:
    pytest.skip(f"–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ slots: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å casino.slots –∏–ª–∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ({e}).", allow_module_level=True)

# --- –¢–µ—Å—Ç—ã –¥–ª—è handle_slots_callback ---

@pytest.mark.asyncio
@patch('casino.slots.get_balance')
async def test_handle_slots_callback(mock_get_balance):
    query = MagicMock(spec=CallbackQuery)
    query.answer = AsyncMock()
    query.from_user = MagicMock(spec=User)
    query.from_user.id = 123
    query.edit_message_text = AsyncMock()
    
    context = MagicMock()
    context.user_data = {}
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
    mock_get_balance.return_value = 200
    
    await handle_slots_callback(query, context)
    
    query.answer.assert_awaited_once()
    mock_get_balance.assert_called_once_with(123)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç —Å—Ç–∞–≤–æ–∫ (1%, 5%, 10% –æ—Ç 200)
    expected_bet_1 = 2 # 1% –æ—Ç 200
    expected_bet_5 = 10 # 5% –æ—Ç 200
    expected_bet_10 = 20 # 10% –æ—Ç 200
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    assert context.user_data['slots_bet'] == expected_bet_1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    query.edit_message_text.assert_awaited_once()
    args, kwargs = query.edit_message_text.call_args
    assert args[0] == "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –¥–ª—è —Å–ª–æ—Ç–æ–≤:"
    assert isinstance(kwargs['reply_markup'], InlineKeyboardMarkup)
    keyboard = kwargs['reply_markup'].inline_keyboard
    assert len(keyboard) == 3
    assert keyboard[0][0].text == f"–°—Ç–∞–≤–∫–∞ 1% ({expected_bet_1} –º–æ–Ω–µ—Ç)"
    assert keyboard[0][0].callback_data == f"slots_bet:{expected_bet_1}"
    assert keyboard[1][0].text == f"–°—Ç–∞–≤–∫–∞ 5% ({expected_bet_5} –º–æ–Ω–µ—Ç)"
    assert keyboard[1][0].callback_data == f"slots_bet:{expected_bet_5}"
    assert keyboard[2][0].text == f"–°—Ç–∞–≤–∫–∞ 10% ({expected_bet_10} –º–æ–Ω–µ—Ç)"
    assert keyboard[2][0].callback_data == f"slots_bet:{expected_bet_10}"

@pytest.mark.asyncio
@patch('casino.slots.get_balance')
async def test_handle_slots_callback_low_balance(mock_get_balance):
    """–¢–µ—Å—Ç, —á—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —Ä–∞–≤–Ω–∞ 1, –¥–∞–∂–µ –µ—Å–ª–∏ % –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –º–µ–Ω—å—à–µ."""
    query = MagicMock(spec=CallbackQuery)
    query.answer = AsyncMock()
    query.from_user = MagicMock(spec=User)
    query.from_user.id = 456
    query.edit_message_text = AsyncMock()
    
    context = MagicMock()
    context.user_data = {}
    mock_get_balance.return_value = 50 # –ë–∞–ª–∞–Ω—Å, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º 1% –º–µ–Ω—å—à–µ 1
    
    await handle_slots_callback(query, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç —Å—Ç–∞–≤–æ–∫ (–º–∏–Ω–∏–º—É–º 1)
    expected_bet_1 = 1 # max(int(50*0.01), 1)
    expected_bet_5 = 2 # max(int(50*0.05), 1)
    expected_bet_10 = 5 # max(int(50*0.1), 1)
    
    assert context.user_data['slots_bet'] == expected_bet_1
    
    args, kwargs = query.edit_message_text.call_args
    keyboard = kwargs['reply_markup'].inline_keyboard
    assert keyboard[0][0].text == f"–°—Ç–∞–≤–∫–∞ 1% ({expected_bet_1} –º–æ–Ω–µ—Ç)"
    assert keyboard[0][0].callback_data == f"slots_bet:{expected_bet_1}"
    assert keyboard[1][0].text == f"–°—Ç–∞–≤–∫–∞ 5% ({expected_bet_5} –º–æ–Ω–µ—Ç)"
    assert keyboard[1][0].callback_data == f"slots_bet:{expected_bet_5}"
    assert keyboard[2][0].text == f"–°—Ç–∞–≤–∫–∞ 10% ({expected_bet_10} –º–æ–Ω–µ—Ç)"
    assert keyboard[2][0].callback_data == f"slots_bet:{expected_bet_10}"

# --- –¢–µ—Å—Ç—ã –¥–ª—è handle_slots_bet_callback ---

@pytest.mark.asyncio
@patch('casino.slots.get_balance')
@patch('casino.slots.update_balance')
@patch('random.choice')
async def test_handle_slots_bet_jackpot(mock_random_choice, mock_update_balance, mock_get_balance):
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.answer = AsyncMock()
    query.from_user = MagicMock(spec=User)
    query.from_user.id = 777
    query.edit_message_text = AsyncMock()
    bet = 10
    query.data = f"slots_bet:{bet}"
    update.callback_query = query
    
    context = MagicMock()
    context.user_data = {}
    
    # –ë–∞–ª–∞–Ω—Å –¥–æ —Å—Ç–∞–≤–∫–∏, –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞
    mock_get_balance.side_effect = [100, 100 - bet + (bet * 5)]
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã - –¥–∂–µ–∫–ø–æ—Ç
    mock_random_choice.return_value = "üíé"
    
    await handle_slots_bet_callback(update, context)
    
    query.answer.assert_awaited_once()
    assert context.user_data['slots_bet'] == bet
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞
    mock_update_balance.assert_has_calls([
        call(777, -bet), # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
        call(777, bet * 5)  # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ x5
    ])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    query.edit_message_text.assert_awaited_once()
    args, kwargs = query.edit_message_text.call_args
    result_text = "üíé | üíé | üíé"
    assert f"üé∞ {result_text} üé∞" in args[0]
    assert f"–î–∂–µ–∫–ø–æ—Ç! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {bet * 5} –º–æ–Ω–µ—Ç!" in args[0]
    assert f"–í–∞—à –±–∞–ª–∞–Ω—Å: {100 - bet + (bet * 5)} –º–æ–Ω–µ—Ç." in args[0]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
    assert isinstance(kwargs['reply_markup'], InlineKeyboardMarkup)
    keyboard = kwargs['reply_markup'].inline_keyboard
    assert keyboard[0][0].text == "üîÑ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑"
    assert keyboard[0][0].callback_data == f"slots_bet:{bet}"
    assert keyboard[1][0].text == "üè† –í –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ"
    assert keyboard[1][0].callback_data == "casino:menu"

@pytest.mark.asyncio
@patch('casino.slots.get_balance')
@patch('casino.slots.update_balance')
@patch('random.choice')
async def test_handle_slots_bet_two_match(mock_random_choice, mock_update_balance, mock_get_balance):
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    # ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ update/query/context) ...
    query.answer = AsyncMock()
    query.from_user = MagicMock(spec=User)
    query.from_user.id = 888
    query.edit_message_text = AsyncMock()
    bet = 5
    query.data = f"slots_bet:{bet}"
    update.callback_query = query
    context = MagicMock()
    context.user_data = {}

    mock_get_balance.side_effect = [50, 50 - bet + (bet * 2)]
    # –†–µ–∑—É–ª—å—Ç–∞—Ç - –¥–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    mock_random_choice.side_effect = ["üçí", "üçí", "üçã"]
    
    await handle_slots_bet_callback(update, context)
    
    mock_update_balance.assert_has_calls([
        call(888, -bet), 
        call(888, bet * 2)  # –í—ã–∏–≥—Ä—ã—à x2
    ])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    args, kwargs = query.edit_message_text.call_args
    result_text = "üçí | üçí | üçã"
    assert f"üé∞ {result_text} üé∞" in args[0]
    assert f"–î–≤–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {bet * 2} –º–æ–Ω–µ—Ç!" in args[0]
    assert f"–í–∞—à –±–∞–ª–∞–Ω—Å: {50 - bet + (bet * 2)} –º–æ–Ω–µ—Ç." in args[0]
    # ... (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫) ...

@pytest.mark.asyncio
@patch('casino.slots.get_balance')
@patch('casino.slots.update_balance')
@patch('random.choice')
async def test_handle_slots_bet_no_match(mock_random_choice, mock_update_balance, mock_get_balance):
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    # ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ update/query/context) ...
    query.answer = AsyncMock()
    query.from_user = MagicMock(spec=User)
    query.from_user.id = 999
    query.edit_message_text = AsyncMock()
    bet = 20
    query.data = f"slots_bet:{bet}"
    update.callback_query = query
    context = MagicMock()
    context.user_data = {}

    mock_get_balance.side_effect = [200, 200 - bet]
    # –†–µ–∑—É–ª—å—Ç–∞—Ç - –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    mock_random_choice.side_effect = ["üîî", "üçÄ", "7Ô∏è‚É£"]
    
    await handle_slots_bet_callback(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
    mock_update_balance.assert_called_once_with(999, -bet)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    args, kwargs = query.edit_message_text.call_args
    result_text = "üîî | üçÄ | 7Ô∏è‚É£"
    assert f"üé∞ {result_text} üé∞" in args[0]
    assert f"–ù–∏—á–µ–≥–æ –Ω–µ —Å–æ–≤–ø–∞–ª–æ. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –º–æ–Ω–µ—Ç." in args[0]
    assert f"–í–∞—à –±–∞–ª–∞–Ω—Å: {200 - bet} –º–æ–Ω–µ—Ç." in args[0]
    # ... (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫) ...

@pytest.mark.asyncio
@patch('casino.slots.get_balance', return_value=5) # –ë–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ —Å—Ç–∞–≤–∫–∏
@patch('casino.slots.update_balance')
async def test_handle_slots_bet_insufficient_balance(mock_update_balance, mock_get_balance):
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    # ... (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ update/query/context) ...
    query.answer = AsyncMock()
    query.from_user = MagicMock(spec=User)
    query.from_user.id = 111
    query.edit_message_text = AsyncMock()
    bet = 10
    query.data = f"slots_bet:{bet}"
    update.callback_query = query
    context = MagicMock()
    context.user_data = {}
    
    await handle_slots_bet_callback(update, context)
    
    query.answer.assert_awaited_once()
    mock_get_balance.assert_called_once_with(111)
    mock_update_balance.assert_not_called() # –ë–∞–ª–∞–Ω—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å—Å—è
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    query.edit_message_text.assert_awaited_once_with("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏!")

@pytest.mark.asyncio
async def test_handle_slots_bet_invalid_data():
    """–¢–µ—Å—Ç –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ callback_data."""
    update = MagicMock(spec=Update)
    query = MagicMock(spec=CallbackQuery)
    query.answer = AsyncMock()
    query.from_user = MagicMock(spec=User)
    query.from_user.id = 222
    query.edit_message_text = AsyncMock()
    query.data = "slots_bet:invalid" # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏
    update.callback_query = query
    context = MagicMock()
    context.user_data = {}
    
    # –ú–æ–∫–∞–µ–º –ª–æ–≥–≥–µ—Ä, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–± –æ—à–∏–±–∫–µ
    with patch('casino.slots.logging') as mock_logging:
        await handle_slots_bet_callback(update, context)
        
        query.answer.assert_awaited_once()
        query.edit_message_text.assert_not_called() # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
        mock_logging.error.assert_called_once() # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤ –ª–æ–≥–µ 