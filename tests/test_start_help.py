import pytest
from unittest.mock import patch, MagicMock, AsyncMock, ANY

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
try:
    from handlers.start_help import start, help_command
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
    import utils
except ImportError as e:
    pytest.skip(f"–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ start_help: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å handlers.start_help –∏–ª–∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ({e}).", allow_module_level=True)

# --- –¢–µ—Å—Ç—ã –¥–ª—è start ---

@pytest.mark.asyncio
@patch('handlers.start_help.check_chat_and_execute') # –ú–æ–∫–∞–µ–º –æ–±–µ—Ä—Ç–∫—É
async def test_start(mock_check_chat):
    update = MagicMock()
    context = MagicMock()
    
    await start(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ check_chat_and_execute –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    # ANY –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ _start, —Ç.–∫. –µ—ë —Å–ª–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
    mock_check_chat.assert_awaited_once_with(update, context, ANY)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é _start, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ check_chat_and_execute
    _, _, internal_func = mock_check_chat.call_args[0]
    
    # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é _start
    bot_mock = AsyncMock()
    context.bot = bot_mock
    update.effective_chat.id = 123 # –ü—Ä–∏–º–µ—Ä ID —á–∞—Ç–∞
    
    await internal_func(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expected_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–∏—â–µ!\n\n"
        "–Ø ‚Äì –ú–∏—à–∫–∞, –ø–æ–º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å —è—Ä–∫–∏—Ö –∫—Ä–∞—Å–æ–∫ –≤ —á–∞—Ç!\n"
        "–í—ã–∑—ã–≤–∞–π <b>/help</b> –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n\n"
        "–ì–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–û–õ! üòÑ"
    )
    bot_mock.send_message.assert_awaited_once_with(
        chat_id=123,
        text=expected_text,
        parse_mode="HTML"
    )

# --- –¢–µ—Å—Ç—ã –¥–ª—è help_command ---

@pytest.mark.asyncio
@patch('handlers.start_help.check_chat_and_execute')
async def test_help_command(mock_check_chat):
    update = MagicMock()
    context = MagicMock()

    await help_command(update, context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ –æ–±–µ—Ä—Ç–∫–∏
    mock_check_chat.assert_awaited_once_with(update, context, ANY)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é _help
    _, _, internal_func = mock_check_chat.call_args[0]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é _help
    bot_mock = AsyncMock()
    context.bot = bot_mock
    update.effective_chat.id = 456
    
    await internal_func(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
    # –¢–æ—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–∞ —Å–≤–µ—Ä—è—Ç—å –Ω–µ –±—É–¥–µ–º, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
    bot_mock.send_message.assert_awaited_once()
    args, kwargs = bot_mock.send_message.call_args
    assert kwargs['chat_id'] == 456
    assert "<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞</b>" in kwargs['text']
    assert "/start" in kwargs['text']
    assert "/help" in kwargs['text']
    assert "/roll" in kwargs['text']
    # ... –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥
    assert kwargs['parse_mode'] == "HTML" 