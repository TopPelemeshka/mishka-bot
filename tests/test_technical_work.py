import pytest
from unittest.mock import patch, MagicMock, mock_open, AsyncMock

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
try:
    from handlers.technical_work import technical_work_command, POST_CHAT_ID
except ImportError as e:
    pytest.skip(f"–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ technical_work: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å handlers.technical_work –∏–ª–∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ({e}).", allow_module_level=True)

@pytest.mark.asyncio
@patch('builtins.open', new_callable=mock_open)
async def test_technical_work_command_success(mock_file):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /technical_work"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —Ñ–∞–π–ª–∞
    mock_file_handle = MagicMock()
    mock_file.return_value.__enter__.return_value = mock_file_handle
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è update –∏ context
    update = MagicMock()
    context = MagicMock()
    context.bot = AsyncMock()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º AsyncMock –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await technical_work_command(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª –æ—Ç–∫—Ä—ã—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    mock_file.assert_called_once_with("pictures/technical_work.jpg", "rb")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    context.bot.send_photo.assert_awaited_once_with(
        chat_id=POST_CHAT_ID,
        photo=mock_file_handle,
        caption="‚öôÔ∏è –í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã, –±–æ—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º, –æ—Ç–¥—ã—Ö–∞–π—Ç–µ, –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ! üòÑ"
    )

@pytest.mark.asyncio
@patch('builtins.open')
@patch('logging.error')
async def test_technical_work_command_error(mock_logging, mock_open):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /technical_work"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –æ–Ω –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    mock_open.side_effect = Exception("Test error")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è update –∏ context
    update = MagicMock()
    context = MagicMock()
    context.bot = AsyncMock()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º AsyncMock –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await technical_work_command(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
    mock_logging.assert_called_once()
    args, _ = mock_logging.call_args
    assert "Test error" in args[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    context.bot.send_message.assert_awaited_once_with(
        chat_id=POST_CHAT_ID,
        text="–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö."
    ) 