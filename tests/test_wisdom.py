import pytest
import json
import os
from unittest.mock import patch, mock_open, MagicMock, AsyncMock

# –ú–æ–∫–∞–µ–º –º–æ–¥—É–ª—å config
config_mock = MagicMock()
config_mock.POST_CHAT_ID = 12345
config_mock.MATERIALS_DIR = "post_materials"
sys_modules_patcher = patch.dict('sys.modules', {'config': config_mock})
sys_modules_patcher.start()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ wisdom.py
try:
    import wisdom
    from wisdom import (
        load_wisdoms,
        save_wisdoms,
        get_random_wisdom,
        wisdom_post_callback,
        start_wisdom_command,
        stop_wisdom_command,
        WISDOM_FILE  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è –ø–∞—Ç—á–∏–Ω–≥–∞ –ø—É—Ç–µ–π
    )
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º state –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö/—Ñ—É–Ω–∫—Ü–∏–π
    import state 
except ImportError as e:
    pytest.skip(f"–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ wisdom: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å wisdom –∏–ª–∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ({e}).", allow_module_level=True)

# --- –¢–µ—Å—Ç—ã –¥–ª—è load_wisdoms ---

@patch('os.path.exists', return_value=True)
@patch('builtins.open', new_callable=mock_open, read_data='["Wisdom 1", "Wisdom 2"]')
def test_load_wisdoms_success(mock_file_open, mock_exists):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –º—É–¥—Ä–æ—Å—Ç–µ–π –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    wisdoms = load_wisdoms()
    mock_exists.assert_called_once_with(WISDOM_FILE)
    mock_file_open.assert_called_once_with(WISDOM_FILE, "r", encoding="utf-8")
    assert wisdoms == ["Wisdom 1", "Wisdom 2"]

@patch('os.path.exists', return_value=False)
def test_load_wisdoms_file_not_exists(mock_exists):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –º—É–¥—Ä–æ—Å—Ç–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    wisdoms = load_wisdoms()
    mock_exists.assert_called_once_with(WISDOM_FILE)
    assert wisdoms == []

@patch('os.path.exists', return_value=True)
@patch('builtins.open', new_callable=mock_open, read_data='invalid json')
def test_load_wisdoms_invalid_json(mock_file_open, mock_exists):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º JSON –≤ —Ñ–∞–π–ª–µ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å [])."""
    wisdoms = load_wisdoms()
    mock_exists.assert_called_once_with(WISDOM_FILE)
    mock_file_open.assert_called_once_with(WISDOM_FILE, "r", encoding="utf-8")
    assert wisdoms == [] # –û–∂–∏–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ

@patch('os.path.exists', return_value=True)
@patch('builtins.open', side_effect=IOError("Test Read Error"))
def test_load_wisdoms_read_error(mock_file_open, mock_exists):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å [])."""
    wisdoms = load_wisdoms()
    mock_exists.assert_called_once_with(WISDOM_FILE)
    mock_file_open.assert_called_once_with(WISDOM_FILE, "r", encoding="utf-8")
    assert wisdoms == [] # –û–∂–∏–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# --- –¢–µ—Å—Ç—ã –¥–ª—è save_wisdoms ---

@patch('builtins.open', new_callable=mock_open)
@patch('json.dump')
def test_save_wisdoms_success(mock_json_dump, mock_file_open):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º—É–¥—Ä–æ—Å—Ç–µ–π."""
    wisdoms_to_save = ["New Wisdom 1", "New Wisdom 2"]
    save_wisdoms(wisdoms_to_save)
    mock_file_open.assert_called_once_with(WISDOM_FILE, "w", encoding="utf-8")
    handle = mock_file_open() # –ü–æ–ª—É—á–∞–µ–º file handle
    mock_json_dump.assert_called_once_with(wisdoms_to_save, handle, ensure_ascii=False, indent=4)

@patch('builtins.open', side_effect=IOError("Test Write Error"))
def test_save_wisdoms_write_error(mock_file_open):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏."""
    with pytest.raises(IOError): # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
        save_wisdoms(["Wisdom"])
    mock_file_open.assert_called_once_with(WISDOM_FILE, "w", encoding="utf-8")

# --- –¢–µ—Å—Ç—ã –¥–ª—è get_random_wisdom ---

@patch('wisdom.load_wisdoms')
@patch('wisdom.save_wisdoms')
@patch('random.choice', return_value="Chosen Wisdom")
def test_get_random_wisdom_success(mock_random_choice, mock_save_wisdoms, mock_load_wisdoms):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –º—É–¥—Ä–æ—Å—Ç–∏."""
    initial_wisdoms = ["Wisdom 1", "Chosen Wisdom", "Wisdom 3"]
    mock_load_wisdoms.return_value = initial_wisdoms.copy() # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é, —Ç.–∫. —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
    
    chosen = get_random_wisdom()
    
    assert chosen == "Chosen Wisdom"
    mock_load_wisdoms.assert_called_once()
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ –±–µ–∑ "Chosen Wisdom"
    expected_list = initial_wisdoms.copy()
    expected_list.remove("Chosen Wisdom")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º—É–¥—Ä–æ—Å—Ç–∏
    mock_save_wisdoms.assert_called_once_with(expected_list)

@patch('wisdom.load_wisdoms', return_value=[])
@patch('wisdom.save_wisdoms')
@patch('random.choice')
def test_get_random_wisdom_empty_list(mock_random_choice, mock_save_wisdoms, mock_load_wisdoms):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ –º—É–¥—Ä–æ—Å—Ç–µ–π –ø—É—Å—Ç."""
    chosen = get_random_wisdom()
    
    assert chosen is None
    mock_load_wisdoms.assert_called_once()
    mock_random_choice.assert_not_called()
    mock_save_wisdoms.assert_not_called()

# --- –¢–µ—Å—Ç—ã –¥–ª—è wisdom_post_callback ---

@pytest.mark.asyncio
@patch('wisdom.state.wisdom_enabled', True)
@patch('wisdom.get_random_wisdom', return_value="Today's Wisdom")
@patch('wisdom.POST_CHAT_ID', 12345)
async def test_wisdom_post_callback_enabled_with_wisdom(mock_get_wisdom):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–±—ç–∫, –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ –∏ –µ—Å—Ç—å –º—É–¥—Ä–æ—Å—Ç—å."""
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()
    
    await wisdom_post_callback(context)
    
    mock_get_wisdom.assert_called_once()
    context.bot.send_message.assert_awaited_once_with(
        chat_id=12345,
        text="ü¶â –ú—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è:\n\nToday's Wisdom"
    )

@pytest.mark.asyncio
@patch('wisdom.state.wisdom_enabled', True)
@patch('wisdom.get_random_wisdom', return_value=None) # –ú—É–¥—Ä–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
@patch('wisdom.POST_CHAT_ID', 12345)
async def test_wisdom_post_callback_enabled_no_wisdom(mock_get_wisdom):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–±—ç–∫, –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞, –Ω–æ –º—É–¥—Ä–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å."""
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()
    
    await wisdom_post_callback(context)
    
    mock_get_wisdom.assert_called_once()
    context.bot.send_message.assert_awaited_once_with(
        chat_id=12345,
        text="–ú—É–¥—Ä–æ—Å—Ç–∏ –¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò¢"
    )

@pytest.mark.asyncio
@patch('wisdom.state.wisdom_enabled', False) # –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
@patch('wisdom.get_random_wisdom')
async def test_wisdom_post_callback_disabled(mock_get_wisdom):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–±—ç–∫, –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞."""
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()
    
    await wisdom_post_callback(context)
    
    mock_get_wisdom.assert_not_called()
    context.bot.send_message.assert_not_awaited()

# --- –¢–µ—Å—Ç—ã –¥–ª—è start_wisdom_command ---

@pytest.mark.asyncio
@patch('wisdom.state.save_state') # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
@patch('wisdom.state.autopost_enabled', True) # –ü—Ä–∏–º–µ—Ä –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@patch('wisdom.state.quiz_enabled', True)
async def test_start_wisdom_command(mock_save_state):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤–∫–ª—é—á–µ–Ω–∏—è –º—É–¥—Ä–æ—Å—Ç–∏ –¥–Ω—è."""
    update = MagicMock()
    update.effective_chat.id = 9876
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ wisdom_enabled –≤ False
    wisdom.state.wisdom_enabled = False 
    
    await start_wisdom_command(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ True
    assert wisdom.state.wisdom_enabled is True
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ save_state –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    mock_save_state.assert_called_once_with(True, True, True) # autopost, quiz, wisdom
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    context.bot.send_message.assert_awaited_once_with(
        chat_id=9876,
        text="–ú—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è –≤–∫–ª—é—á–µ–Ω–∞!"
    )

# --- –¢–µ—Å—Ç—ã –¥–ª—è stop_wisdom_command ---

@pytest.mark.asyncio
@patch('wisdom.state.save_state') # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
@patch('wisdom.state.autopost_enabled', True) # –ü—Ä–∏–º–µ—Ä –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@patch('wisdom.state.quiz_enabled', False)
async def test_stop_wisdom_command(mock_save_state):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –º—É–¥—Ä–æ—Å—Ç–∏ –¥–Ω—è."""
    update = MagicMock()
    update.effective_chat.id = 9876
    context = MagicMock()
    context.bot = AsyncMock()
    context.bot.send_message = AsyncMock()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ wisdom_enabled –≤ True
    wisdom.state.wisdom_enabled = True
    
    await stop_wisdom_command(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ False
    assert wisdom.state.wisdom_enabled is False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ save_state –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    mock_save_state.assert_called_once_with(True, False, False) # autopost, quiz, wisdom
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    context.bot.send_message.assert_awaited_once_with(
        chat_id=9876,
        text="–ú—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è –æ—Ç–∫–ª—é—á–µ–Ω–∞!"
    ) 